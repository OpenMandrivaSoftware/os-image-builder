#!/bin/bash
if [ "$(id -u)" != "0" ]; then
	echo "This script needs root access."
	echo "The default root password of the live image is \"omv\"."
	exec sudo $0 "$@"
	exit 1
fi

TOOLOUTPUT=/dev/null
if [ "$1" = "-v" ] || [ "$1" = "--verbose" ]; then
	TOOLOUTPUT=/dev/stderr
	VERBOSE=-v
	shift
fi

DESTINATION=/dev/sda
[ -n "$1" ] && DESTINATION="$1"

if ! [ -b "$DESTINATION" ]; then
	echo "Invalid destination device $DESTINATION"
	exit 1
fi

cat <<EOF
WARNING: This script will overwrite the entire disk $1
Press Ctrl-C if you don't want this to happen. Use $0 /dev/whatever to
select a different target device.

e.g. in a default SynQuacer setup:
	/dev/sda is the harddisk
	/dev/mmcblk0 is the onboard MMC storage
	/dev/sdb is the first USB storage device

At the moment, this install script doesn't support installing alongside
another OS on the same disk - but you can install manually using the commands
in the script (skipping over partitioning and mounting steps).

Press Enter to continue or Ctrl-C to abort.
EOF
read

DISKSIZE="$(gdisk -l $DESTINATION |grep "^Disk /" |awk '{ print $3; }')"
# gdisk output is in sectors of 512 bytes
DISKSIZE=$((DISKSIZE*512))

echo "Setting up partition table..."
if [ "$DISKSIZE" -gt 100000000000 ]; then
	# Disk is large enough for EFI/swap/root/home split

	# Commands fed into gdisk:
	#	o -- delete all partitions and create a new GPT partition table
	#	y 	-- confirm o command
	#	n -- Create new partition
	#	1	-- partition number
	#		-- keep default start sector
	#	+256M	-- Size of EFI system partition (256 MB)
	#	ef00	-- Partition type ef00 -- EFI system partition
	#	n -- Create new partition
	#	2	-- partition number
	#		-- keep default start sector
	#	+8G	-- Size of swap partition (8 GB)
	#	8200	-- Partition type 8200 -- Linux Swap
	#	n -- Create new partition
	#	3	-- partition number
	#		-- keep default start sector
	#	+60G	-- Size of root partition (60 GB)
	#	8305	-- Partition type 8305 -- Linux ARM64 root
	#	n -- Create new partition
	#	4	-- partition number
	#		-- keep default start sector
	#		-- keep default end sector (use rest of disk)
	#	8302	-- Partition type 8302 -- Linux /home
	#	w -- Write table to disk and exit
	#	y 	-- confirm w command
	gdisk $DESTINATION &>$TOOLOUTPUT <<EOF
o
y
n
1

+256M
ef00
n
2

+8G
8200
n
3

+60G
8305
n
4


8302
w
y
EOF
	kpartx ${DESTINATION}
	if [ -e ${DESTINATION}p1 ]; then
		# Deal with e.g. sda --> sda1, sda2, ...
		#            vs. mmcblk0 --> mmcblk0p1, mmcblk0p2, ...
		DESTINATION="${DESTINATION}p"
	fi
	UEFI=${DESTINATION}1
	SWAP=${DESTINATION}2
	ROOT=${DESTINATION}3
	HOME=${DESTINATION}4
else
	# Small disk (internal MMC storage?) -- let's try to get by with
	# just an EFI partition and a root partition

	# Commands fed into gdisk:
	#	o -- delete all partitions and create a new GPT partition table
	#	y 	-- confirm o command
	#	n -- Create new partition
	#	1	-- partition number
	#		-- keep default start sector
	#	+256M	-- Size of EFI system partition (256 MB)
	#	ef00	-- Partition type ef00 -- EFI system partition
	#	n -- Create new partition
	#	2	-- partition number
	#		-- keep default start sector
	#		-- keep default end sector (use rest of disk)
	#	8305	-- Partition type 8305 -- Linux ARM64 root
	#	w -- Write table to disk and exit
	#	y 	-- confirm w command
	gdisk $DESTINATION &>$TOOLOUTPUT <<EOF
o
y
n
1

+256M
ef00
n
2


8305
w
y
EOF
	kpartx ${DESTINATION}
	if [ -e ${DESTINATION}p1 ]; then
		# Deal with e.g. sda --> sda1, sda2, ...
		#            vs. mmcblk0 --> mmcblk0p1, mmcblk0p2, ...
		DESTINATION="${DESTINATION}p"
	fi
	UEFI=${DESTINATION}1
	ROOT=${DESTINATION}2
	SWAP=""
	HOME=""
fi

if [ -z "$UEFI" ]; then
	echo "No UEFI partition - apparently partitioning went wrong."
	exit 1
fi
if [ -z "$ROOT" ]; then
	echo "No root partition - apparently partitioning went wrong."
	exit 1
fi

if [ -n "$UEFI" ] && [ ! -b "$UEFI" ]; then
	echo "Device node for UEFI system partition $UEFI didn't get created."
	echo "Apparently partitioning went wrong."
	exit 1
fi
if [ -n "$SWAP" ] && [ ! -b "$SWAP" ]; then
	echo "Device node for Swap partition $SWAP didn't get created."
	echo "Apparently partitioning went wrong."
	exit 1
fi
if [ -n "$ROOT" ] && [ ! -b "$ROOT" ]; then
	echo "Device node for Root partition $ROOT didn't get created."
	echo "Apparently partitioning went wrong."
	exit 1
fi
if [ -n "$HOME" ] && [ ! -b "$HOME" ]; then
	echo "Device node for Home partition $HOME didn't get created."
	echo "Apparently partitioning went wrong."
	exit 1
fi

echo "Formatting UEFI partition..."
mkfs.vfat -n UEFI $UEFI &>$TOOLOUTPUT
if [ -n "$SWAP" ]; then
	echo "Formatting swap partition..."
	mkswap -f $SWAP &>$TOOLOUTPUT
	swapon $SWAP
fi
echo "Formatting / partition..."
mkfs.ext4 -F -L/ $ROOT &>$TOOLOUTPUT
ROOTUUID=$(/sbin/blkid $ROOT |sed -e 's,.* UUID=",,;s,".*,,')
if [ -n "$HOME" ]; then
	echo "Formatting /home partition..."
	mkfs.ext4 -F -L/home $HOME &>$TOOLOUTPUT
fi

# Make sure efivarfs is mounted -- it might not be if
# the kernel has been built with modular efivarfs and
# the initramfs doesn't force load the module
if [ -z "$(ls -A /sys/firmware/efi/efivars)" ]; then
	mount -t efivarfs none /sys/firmware/efi/efivars
fi

mkdir -p /mnt/destination
mount $ROOT /mnt/destination
if [ -n "$UEFI" ]; then
	mkdir -p /mnt/destination/boot/efi
	mount $UEFI /mnt/destination/boot/efi
	for i in /dev /dev/pts /proc /sys /sys/firmware/efi/efivars; do
		mkdir -p /mnt/destination$i || :
		mount --bind $i /mnt/destination$i
	done
fi
if [ -n "$HOME" ]; then
	mkdir -p /mnt/destination/home
	mount $HOME /mnt/destination/home
fi

echo "Copying OS..."
tar c --one-file-system -f - / | (cd /mnt/destination && tar x $VERBOSE -f -)

echo "Setting up system files..."
echo "$ROOT / ext4 defaults,noatime 0 1" >/mnt/destination/etc/fstab
[ -n "$SWAP" ] && echo "$SWAP swap swap defaults 0 1" >>/mnt/destination/etc/fstab
[ -n "$UEFI" ] && echo "$UEFI /boot/efi vfat defaults,noatime 0 2" >>/mnt/destination/etc/fstab
[ -n "$HOME" ] && echo "$HOME /home ext4 defaults,noatime 0 2" >>/mnt/destination/etc/fstab

if [ -n "$HOME" ]; then
	cp -a /home/* /mnt/destination/home
fi

if [ -n "$UEFI" ]; then
	echo "Copying bootup files..."
	cp -ax /boot/efi/* /mnt/destination/boot/efi/
	echo "Registering with UEFI bootloader"
	if [ -e /mnt/destination/boot/efi/startup.nsh ]; then
		mv /mnt/destination/boot/efi/startup.nsh /mnt/destination/boot/efi/openmandriva.nsh
		sed -i -e "s,/dev/sdb2,$ROOT,g" /mnt/destination/boot/efi/openmandriva.nsh
	fi
	sed -i -e "s,^search .*,search --no-floppy --fs-uuid --set=root $ROOTUUID," /mnt/destination/boot/efi/EFI/BOOT/grub.cfg
	sed -i -e "s,LABEL=OMVAA64,UUID=$ROOTUUID,g" /mnt/destination/boot/efi/EFI/BOOT/grub.cfg
	cp /mnt/destination/boot/efi/EFI/BOOT/grub.cfg /mnt/destination/boot/efi/EFI/openmandriva/
	cp /mnt/destination/boot/efi/EFI/BOOT/grub.cfg /mnt/destination/boot/grub2/
	efibootmgr --create -L 'OpenMandriva Lx 4.2' -l '\EFI\BOOT\bootaa64.efi' -d "$DESTINATION" -p $(echo $UEFI |sed -e "s,$DESTINATION,,")
	chroot /mnt/destination /usr/sbin/grub2-install 
	umount /mnt/destination/sys/firmware/efi/efivars
	umount /mnt/destination/sys
	umount /mnt/destination/proc
	umount /mnt/destination/dev/pts
	umount /mnt/destination/dev
fi

echo "Cleaning up..."
rm -f /mnt/destination/home/omv/install-openmandriva
[ -n "$HOME" ] && umount /mnt/destination/home
[ -n "$UEFI" ] && umount /mnt/destination/boot/efi
umount /mnt/destination

echo "DONE! OpenMandriva should now be installed."
