# Generic aarch64 board with UEFI support
ARCH="aarch64"
# Let's use a current kernel, it usually has more hardware support
HWPACKAGES="kernel-rc-server"
# Most boards have a PCIE-slot that may take a graphics card (so we
# need radeon and nouveau), others have onboard graphics (typically
# mali or adreno...)
HWPACKAGES_gui="$HWPACKAGES_gui lib64dri-drivers-radeon lib64dri-drivers-nouveau lib64dri-drivers-lima lib64dri-drivers-panfrost lib64dri-drivers-freedreno"
# Let's support what people might drop into those PCI-E slots...
HWPACKAGES="$HWPACKAGES pciutils kernel-firmware kernel-firmware-extra iwlwifi-agn-ucode"
CMDLINE="console=tty1 nouveau.config=NvClkMode=auto"
# (this is the default anyway)
# NEED_INITRD=yes
USE_UEFI=yes

# Let's support what people might drop into those PCI-E slots...
#KERNEL="https://github.com/OpenMandrivaSoftware/linux.git#hardware/SynQuacer/5.7"
#KERNEL_CONFIG="defconfig"
#DTB=""
# Enable what's needed for SynQuacer, disable some options that
# are entirely useless there...
#KERNEL_EXTRACONFIG="--enable ARCH_SYNQUACER --enable SNI_NETSEC --enable GPIO_MB86S7X --enable MMC_SDHCI_F_SDH30 --disable SND_SOC --disable ARCH_SUNXI --disable ARCH_ALPINE --disable ARCH_BCM2835 --disable ARCH_BCM_IPROC --disable ARCH_BERLIN --disable ARCH_BRCMSTB --disable ARCH_EXYNOS --disable ARCH_K3 --disable ARCH_LAYERSCAPE --disable ARCH_LG1K --disable ARCH_HISI --disable ARCH_MEDIATEK --disable ARCH_MESON --disable ARCH_MVEBU --disable ARCH_QCOM --disable ARCH_REALTEK --disable ARCH_RENESAS --disable ARCH_ROCKCHIP --disable ARCH_SEATTLE --disable ARCH_STRATIX10 --disable ARCH_TEGRA --disable ARCH_SPRD --disable ARCH_THUNDER --disable ARCH_THUNDER2 --disable ARCH_UNIPHIER --disable ARCH_VEXPRESS --disable ARCH_XGENE --disable ARCH_ZX --disable ARCH_ZYNQMP --disable DRM_HISI_HIBMC --disable DRM_HISI_KIRIN --disable RASPBERRYPI_POWER --disable SOC_BRCMSTB --disable RASPBERRYPI_FIRMWARE --disable SENSORS_RASPBERRYPI_HWMON --disable SOC_TI"
# Let's enable support for some PCI-E soundcards that may well work...
#KERNEL_EXTRACONFIG="$KERNEL_EXTRACONFIG --module SND_HDA --module SND_HDA_INTEL --disable SND_HDA_INTEL_DETECT_DMIC --module SND_HDA_CODEC_CMEDIA --module SND_HDA_GENERIC --enable SND_HDA_HWDEP --enable SND_HDA_RECONFIG --enable SND_HDA_INPUT_BEEP --set-val SND_HDA_INPUT_BEEP_MODE 1 --enable SND_HDA_PATCH_LOADER --module SND_HDA_CODEC_REALTEK --module SND_HDA_CODEC_ANALOG --module SND_HDA_CODEC_SIGMATEL --module SND_HDA_CODEC_VIA --module SND_HDA_CODEC_HDMI --module SND_HDA_CODEC_CIRRUS --module SND_HDA_CODEC_CONEXANT --module SND_HDA_CODEC_CA0110 --module SND_HDA_CODEC_CA0132 --enable SND_HDA_CODEC_CA0132_DSP --module SND_HDA_CODEC_SI3054 --set-val SND_HDA_POWER_SAVE_DEFAULT 60 --set-val SND_MAX_CARDS 32"
# PCI-E graphics cards are useful...
#KERNEL_EXTRACONFIG="$KERNEL_EXTRACONFIG --module DRM_RADEON --disable DRM_RADEON_USERPTR --module DRM_AMDGPU --enable DRM_AMDGPU_SI --enable DRM_AMDGPU_CIK --disable DRM_AMDGPU_USERPTR --disable DRM_AMDGPU_GART_DEBUGFS --enable DRM_AMD_ACP --enable DRM_AMD_DC --disable DRM_AMD_DC_HDCP --disable DEBUG_KERNEL_DC --disable CHASH_STATS --disable CHASH_SELFTEST --module DRM_NOUVEAU --enable HSA_AMD"
# PCI-E WiFi modules
#KERNEL_EXTRACONFIG="$KERNEL_EXTRACONFIG --module IWLWIFI --module IWLDVM --module IWLMVM --enable IWLWIFI_BCAST_FILTERING --disable IWLWIFI_DEBUG"
# Enable stuff docker likes...
#	docker cgroups...
#KERNEL_EXTRACONFIG="$KERNEL_EXTRACONFIG --enable CGROUP_FREEZER --module NETFILTER_XT_MATCH_IPVS --module NETFILTER_XT_MATCH_POLICY"
#	docker optional features
#KERNEL_EXTRACONFIG="$KERNEL_EXTRACONFIG --enable BLK_DEV_THROTTLING --enable BLK_DEV_THROTTLING_LOW --module CFQ_GROUP_IOSCHED --module NET_CLS_CGROUP --enable CGROUP_NET_PRIO --enable CGROUP_NET_CLASSID --enable CFS_BANDWIDTH --enable RT_GROUP_SCHED --module IP_NF_TARGET_REDIRECT --module IP_VS --enable IP_VS_IPV6 --disable IP_VS_DEBUG --set-val IP_VS_TAB_BITS 12 --module IP_VS_NFCT --enable IP_VS_PROTO_TCP --enable IP_VS_PROTO_UDP --enable IP_VS_PROTO_ESP --enable IP_VS_PROTO_AH --enable IP_VS_PROTO_SCTP --module IP_VS_WRR --module IP_VS_LC --module IP_VS_WLC --module IP_VS_FO --module IP_VS_OVF --module IP_VS_LBLC --module IP_VS_LBLCR --module IP_VS_DH --module IP_VS_SH --module IP_VS_MH --module IP_VS_SED --module IP_VS_NQ --set-val IP_VS_SH_TAB_BITS 8 --set-val IP_VS_MH_TAB_INDEX 12 --module IP_VS_FTP --module IP_VS_RR --enable EXT4_FS_SECURITY"
#	docker network overlay driver
#KERNEL_EXTRACONFIG="$KERNEL_EXTRACONFIG --module VXLAN --module XFRM_USER --module XFRM_ALGO --module INET_ESP --module INET_ESP_OFFLOAD --disable INET_ESPINTCP --module XFRM_INTERFACE --disable XFRM_SUB_POLICY --disable XFRM_MIGRATE --disable XFRM_STATISTICS"
#	docker network ipvlan driver
#KERNEL_EXTRACONFIG="$KERNEL_EXTRACONFIG --module IPVLAN --module IPVTAP --module GENEVE --module GTP"
#	docker network macvlan driver
#KERNEL_EXTRACONFIG="$KERNEL_EXTRACONFIG --module DUMMY"
#	docker tftp client in container
#KERNEL_EXTRACONFIG="$KERNEL_EXTRACONFIG --module NF_NET_FTP --module NF_CONNTRACK_FTP --module NF_NAT_TFTP --module NF_CONNTRACK_TFTP"
#KERNEL_EXTRACONFIG="$KERNEL_EXTRACONFIG --enable MODULE_FORCE_LOAD --enable MODVERSIONS --enable MODULE_COMPRESS --disable MODULE_COMPRESS_GZIP --enable MODULE_COMPRESS_XZ"
#CMDLINE="earlycon=pl011,0x2a400000,115200 console=ttyAMA0,115200n8 console=tty1 nouveau.config=NvClkMode=auto"
# (this is the default anyway)
# NEED_INITRD=yes
