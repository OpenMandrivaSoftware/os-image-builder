#!/bin/bash

set -x
set -e

listTargets() {
	find device -name config |while read r; do
		dirname $r |cut -d/ -f2-
	done
}
usage() {
	echo "Usage: $0 [ -v VERSION ] target"
	echo "	-v: Use ${BASE_DISTRO} VERSION (default: cooker)"
	echo "	-K: Keep already existing build root (default: no)"
	echo "Available targets:"
	listTargets
}
run() {
	local SCRIPT="$1"
	shift
	printf '%s\n' "Running $SCRIPT"
	if [ -e $OURDIR/device/$TARGET/$SCRIPT ]; then
		. $OURDIR/device/$TARGET/$SCRIPT "$@"
	else
		local T="$TARGET"
		local DONE=false
		while [ "$T" != "." ]; do
			T="$(dirname $T)"
			if [ -e $OURDIR/device/$T/generic/$SCRIPT ]; then
				. $OURDIR/device/$T/generic/$SCRIPT "$@"
				break
			fi
		done
	fi
}
addpackageset() {
	if ! [ -e "$OURDIR/packagesets/$1.pkgs" ]; then
		echo "Unknown package set $1" >&2
		exit 1
	fi
	PACKAGESETS="$PACKAGESETS $1"
	while read p; do
		if echo $p |grep -qE '^#include '; then
			addpackageset $(echo $p |awk '{ print $2; }')
		elif ! echo $p |grep -q '^#'; then
			PACKAGES="$PACKAGES $p"
		fi
	done < <(cat "$OURDIR/packagesets/$1.pkgs")
}
isnative() {
	local CPU=$(echo $1 |cut -d- -f1)
	local ABI=$(echo $1 |rev |cut -d- -f1 |rev)
	local NATIVECPU=$(uname -m)
	local NATIVEABI=gnu
	if ldd /bin/sh |grep -q musl; then
		NATIVEABI=musl
	fi
	if echo $NATIVECPU |grep -q ^arm; then
		NATIVEABI="${NATIVEABI}eabihf"
		NATIVECPU="armv7hnl"
	fi
	[ "$CPU" = "znver1" ] && CPU=x86_64
	if [ "$CPU" = "$NATIVECPU" -a "$ABI" = "$NATIVEABI" ]; then
		return 0
	else
		return 1
	fi
}

if [ "$(id -u)" != "0" ]; then
	echo "Need root privileges to set ownership of extracted files."
	exec sudo $0 "$@"
	exit 1
fi

OURDIR="$(realpath $(dirname $0))"
cd "$OURDIR"

PACKAGES=""
PACKAGESETS=""
SERVICES="dbus-broker NetworkManager"
WEAKDEPS=""
ROOTFS_FS="ext4"
addpackageset core

# for rosa it is http://abf-downloads.rosalinux.ru
ABF_DOWNLOADS="${ABF_DOWNLOADS:-http://abf-downloads.openmandriva.org}"
# for rosa it is rosa-linux-gnu
BASE_TRIPLET="${BASE_TRIPLET:-openmandriva-linux-gnu}"
# ver prefix needed only for rosalinux
# should be just rosa
VER_PREFIX="${VER_PREFIX:-}"
# for rosa it is 2021.1
OMV_VERSION="${OMV_VERSION:-cooker}"
# for rosa it is RosaLinux
BASE_DISTRO="${BASE_DISTRO:-OpenMandriva-Lx}"

# install xldd only on OpenMandriva
if [ $BASE_DISTRO == "OpenMandriva-Lx" ]; then
	XLDD="xldd"
	CROSS_ARM="cross-armv7hnl-openmandriva-linux-gnueabihf-gcc"
else
	XLDD=""
	CROSS_ARM=""
fi

# for rosa it is rosa-repos-main
PRE_PACKAGES="${PRE_PACKAGES:-distro-release-repos}"
[ -z "$FINAL" ] && FINAL=false
OS_VERSION=""
IDENTIFIER=""
while getopts "d:f:Fi:K:o:p:P:r:s:S:v:w:W" opt; do
	case $opt in
	d)
		SDDMSESSION="$OPTARG"
		;;
	f)
		ROOTFS_FS="$OPTARG"
		;;
	F)
		FINAL=true
		;;
	i)
		IDENTIFIER="$OPTARG"
		;;
	v)
		OMV_VERSION="$OPTARG"
		;;
	o)
		OS_VERSION="$OPTARG"
		;;
	p)
		PACKAGES="$PACKAGES $OPTARG"
		;;
	P)
		addpackageset ${OPTARG}
		;;
	r)
		EXTRA_REPOS="$EXTRA_REPOS ${OPTARG}"
		;;
	s)
		SERVICES="$SERVICES ${OPTARG}"
		;;
	S)
		SERVICES="$(echo $SERVICES |sed -e "s,^${OPTARG} ,,;s, ${OPTARG} , ,;s,^${OPTARG}\$,,;s, ${OPTARG}\$,,")"
		;;
	w)
		WEAKDEPS="--setopt=install_weak_deps=True"
		;;
	W)
		WEAKDEPS="--setopt=install_weak_deps=False"
		;;
	K)
		KEEP_OLD_ROOT=true
		;;
	*)
		echo "Unknown option $opt" >&2
		usage
		exit 1
		;;
	esac
done
shift $((OPTIND-1))

if [ -z "$1" ]; then
	usage
	exit 1
fi

if [ -z "$OS_VERSION" ]; then
	[ -n "$IDENTIFIER" ] && OS_VERSION="$IDENTIFIER-"
	OS_VERSION="$OS_VERSION$OMV_VERSION"
	if [ "$FINAL" = "false" ]; then
		# BUILD_ID is set by abf
		if [ -n "${BUILD_ID}" ]; then
			OS_VERSION="${OS_VERSION}-${BUILD_ID}"
		else
			OS_VERSION="${OS_VERSION}-$(date +%Y%m%d)"
		fi
	fi
fi

TARGET="$1"
if ! [ -e device/$TARGET/config ]; then
	# Allow abbreviations, e.g. db410c instead of qualcomm/db410c
	for i in $(find device -name config); do
		if echo $i |grep -q "$TARGET/config\$"; then
			TARGET="$(dirname $i |cut -d/ -f2-)"
			break
		fi
	done
fi
if ! [ -e device/$TARGET/config ]; then
	echo "Invalid target $TARGET"
	usage
	exit 1
fi
SHORTTARGET="$(basename $TARGET)"

echo "Building ${BASE_DISTRO} $OMV_VERSION image for $TARGET"
run config

# ===================================================================
# Add target specific packageset extensions (e.g. graphics drivers
# for the gui package set)
# ===================================================================
for i in $PACKAGESETS; do
	eval "XP=\${HWPACKAGES_${i}}"
	if [ -n "$XP" ]; then
		PACKAGES="$PACKAGES $XP"
	fi
done

# ===================================================================
# Prepare host system
# ===================================================================
if [ -z "$ARCH" ]; then
	echo "$TARGET doesn't specify ARCH, assuming aarch64" >&2
	ARCH=aarch64
fi

TRIPLET=$ARCH-${BASE_TRIPLET}
case $ARCH in
aarch64)
	KERNELARCH=arm64
	QEMUARCH=aarch64
	# We allow overriding KERNELTARGET in configs because
	# some bootloaders support gzipped images, some don't
	[ -z "$KERNELTARGET" ] && KERNELTARGET=Image.gz
	BOOTEFI=bootaa64.efi
	EFIARCH=arm64-efi
	;;
arm*)
	KERNELARCH=arm
	QEMUARCH=arm
	TRIPLET="${TRIPLET}eabihf"
	KERNELTARGET=zImage
	BOOTEFI=bootarm.efi
	EFIARCH=arm-efi
	;;
x86_64|znver1)
	KERNELARCH=x86
	QEMUARCH=x86_64
	KERNELTARGET=vmlinuz
	BOOTEFI=bootx64.efi
	EFIARCH=x86_64-efi
	;;
i686)
	KERNELARCH=x86
	QEMUARCH=i386
	KERNELTARGET=vmlinuz
	BOOTEFI=bootia32.efi
	EFIARCH=i386-efi
	;;
*)
	# Anything here is possibly wrong...
	KERNELARCH=$ARCH
	QEMUARCH=$ARCH
	KERNELTARGET=vmlinuz
	BOOTEFI=boot${ARCH}.efi
	EFIARCH=${ARCH}-efi
	;;
esac
if echo $ARCH |grep -qE '(64|znver1)'; then
	LIB=lib64
else
	LIB=lib
fi

NATIVEBUILD=false
[ "$ARCH" = "$(uname -m)" ] && NATIVEBUILD=true

# Expand variables in PACKAGES now that all parameters
# are known -- allowing for e.g. ${LIB}GL0 to install libGL0
# or lib64GL0 depending on target arch
PACKAGES_TMP="$PACKAGES"
PACKAGES=""
for i in $PACKAGES_TMP; do
	PACKAGES="$PACKAGES $(eval echo $i)"
done

if [ -n "$KERNEL" ]; then
	# We aren't using a packaged kernel, so we need the right toolchain...
	if isnative $TRIPLET; then
		HOSTDEPS="$HOSTDEPS gcc"
	else
		HOSTDEPS="$HOSTDEPS cross-$TRIPLET-gcc"
	fi
	if [ "$ARCH" = "aarch64" ]; then
		# Many aarch64 kernels (e.g. rk3399) need a 32-bit ARM compiler
		# to target a helper Cortex-M0 etc.
		HOSTDEPS="$HOSTDEPS ${CROSS_ARMHF}"
	fi
fi
$NATIVEBUILD || HOSTDEPS="$HOSTDEPS qemu-static-$QEMUARCH"
# vim-common is for xxd, used to decode EDID information for pinebookpro
HOSTDEPS="$HOSTDEPS bc curl make clang gcc dtc glibc-devel bison flex lib64openssl-devel hostname patch vim-common rpm-build kpartx util-linux gptfdisk e2fsprogs f2fs-tools"

if [ -n "$UBOOT_CONFIG" ]; then
	HOSTDEPS="$HOSTDEPS uboot-tools"
fi

if [ -n "$HOSTDEPS" ] && [ -z "$KEEP_OLD_ROOT" ]; then
	if ! dnf -y --refresh --nogpgcheck install $HOSTDEPS; then
		for i in $HOSTDEPS; do
			if ! rpm -q $i &>/dev/null; then
				echo "Couldn't install needed HOST tools. Make sure you're running current ${BASE_DISTRO}"
				echo "or install $i manually"
				exit 1
			fi
		done
	fi

	# Make sure the binfmt handler knows about any qemu-static bits we may have installed...
	if [ !"$ARCH" = "aarch64" ]; then
		HOSTDEPS="$HOSTDEPS"
		echo ':aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff:/usr/bin/qemu-aarch64-static:' >/proc/sys/fs/binfmt_misc/register || :
	fi
fi

# ===================================================================
# Build kernel if necessary
# ===================================================================

SMPFLAGS="-j$(getconf _NPROCESSORS_ONLN)"
[ "$SMPFLAGS" = "-j" ] && SMPFLAGS="-j8"

if isnative $TRIPLET; then
	CCOMP=""
else
	CCOMP="CROSS_COMPILE=/usr/bin/$TRIPLET-"
fi

if [ -n "$KERNEL" ]; then
	echo "Building $TARGET kernel"
	KERNELREPO="$(echo $KERNEL |cut -d'#' -f1)"
	KERNELBRANCH="$(echo $KERNEL |cut -d'#' -f2-)"
	[ -n "$KERNELBRANCH" ] && KERNELBRANCH="-b $KERNELBRANCH"
	[ -z "$KERNEL_CONFIG" ] && KERNEL_CONFIG="defconfig"
	if ! [ -d kernel ]; then
		if ! git clone --depth 1 $KERNELBRANCH $KERNELREPO kernel; then
			# KERNELBRANCH is a tag or commit hash, not a branch
			git clone $KERNELREPO kernel
			cd kernel
			git checkout -b $KERNELBRANCH $KERNELBRANCH
			cd ..
		fi
	fi
	cd kernel
	[ -e scripts/lld-version.sh ] && sed -i -e "s,' ' -f 2,' ' -f 4," scripts/lld-version.sh
	PN=1
	for i in ${OURDIR}/device/${TARGET}/kernel-patches/*.patch ${OURDIR}/device/${TARGET}/kernel-patches/*.diff; do
		echo "Applying $(basename $i)" >&2
		[ -e "$i" ] && patch -p1 -b -z .b${PN}~ <$i
		PN=$((PN+1))
	done
	for i in ${OURDIR}/device/${TARGET}/kernel-patches/*.gitpatch; do
		echo "Applying $(basename $i)" >&2
		[ -e "$i" ] && git apply $i
	done
	run download_kernel_extras

	[ -e ${OURDIR}/device/${TARGET}/../generic/${KERNEL_CONFIG} ] && cp -f ${OURDIR}/device/${TARGET}/../generic/${KERNEL_CONFIG} arch/${KERNELARCH}/configs/
	[ -e ${OURDIR}/device/${TARGET}/${KERNEL_CONFIG} ] && cp -f ${OURDIR}/device/${TARGET}/${KERNEL_CONFIG} arch/${KERNELARCH}/configs/
	# Get rid of the "-dirty" name in localversion
	cd kernel
	git add -A || :
	git commit -am "Apply OpenMandriva patches" || :
	cd ..

	if [ "$KERNEL_GCC" = "yes" ]; then
		make $SMPFLAGS ARCH=$KERNELARCH $KERNEL_CONFIG include/config/kernel.release
	else
		make $SMPFLAGS ARCH=$KERNELARCH LLVM=1 $KERNEL_CONFIG include/config/kernel.release
	fi
	KERNELVERSION=$(cat include/config/kernel.release)
	KERNELVERSION_NUM="$(echo $KERNELVERSION |cut -d- -f1)"
	if echo $KERNELVERSION |grep -q -- -; then
		KERNELVERSION_EXTRA="$(echo $KERNELVERSION |cut -d- -f2- |sed -e 's,-,.,g')"
	fi
	cd ..

	rm -rf kernel-rpm
	mkdir kernel-rpm
	tar cf kernel-rpm/kernel.tar kernel
	zstd -T0 -22 --ultra --rm kernel-rpm/kernel.tar
	cat >kernel-rpm/kernel-$SHORTTARGET.spec <<EOF
%define debug_package %{nil}

Name:		kernel-$SHORTTARGET
Version:	$KERNELVERSION_NUM
EOF

	if [ -n "$KERNELVERSION_EXTRA" ]; then
		echo "Release:	0.$KERNELVERSION_EXTRA.1" >>kernel-rpm/kernel-$SHORTTARGET.spec
	else
		echo "Release:	1" >>kernel-rpm/kernel-$SHORTTARGET.spec
	fi
	cat >>kernel-rpm/kernel-$SHORTTARGET.spec <<EOF
Summary:	kernel for $SHORTTARGET devices
# Tarball generated from the $KERNELBRANCH branch
# of $KERNELREPO
# by os-image-builder
Source0:	kernel.tar.zst
License:	GPLv2
Provides:	kernel = %{EVRD}
Provides:	kernel-release = %{EVRD}

EOF

	cat >>kernel-rpm/kernel-$SHORTTARGET.spec <<EOF
%description
kernel for $SHORTTARGET devices

%prep
%autosetup -p1 -n kernel

%build
EOF

	# CROSS_COMPILE_ARM32 is a Sony-ism, but doesn't hurt anywhere else, so we can specify it unconditionally
	if [ "$KERNEL_GCC" = "yes" ]; then
		echo "%make_build $SMPFLAGS ARCH=$KERNELARCH $CCOMP CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- LD=/usr/bin/$TRIPLET-ld.bfd $KERNEL_CONFIG" >>kernel-rpm/kernel-$SHORTTARGET.spec
	else
		echo "%make_build $SMPFLAGS ARCH=$KERNELARCH CLANG_TRIPLE=$TRIPLET- $CCOMP CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- CC=clang LLVM=1 LD=/usr/bin/$TRIPLET-ld.bfd $KERNEL_CONFIG" >>kernel-rpm/kernel-$SHORTTARGET.spec
	fi
	if [ -n "$KERNEL_EXTRACONFIG" ]; then
		echo "scripts/config $KERNEL_EXTRACONFIG" >>kernel-rpm/kernel-$SHORTTARGET.spec
	fi
	if [ "$KERNEL_GCC" = "yes" ]; then
		echo "%make_build $KERNELTARGET dtbs modules ARCH=$KERNELARCH $CCOMP CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- LD=/usr/bin/$TRIPLET-ld.bfd" >>kernel-rpm/kernel-$SHORTTARGET.spec
	else
		echo "%make_build $KERNELTARGET dtbs modules ARCH=$KERNELARCH CLANG_TRIPLE=$TRIPLET- $CCOMP CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- CC=clang LLVM=1 LD=/usr/bin/$TRIPLET-ld.bfd" >>kernel-rpm/kernel-$SHORTTARGET.spec
	fi
	cat >>kernel-rpm/kernel-$SHORTTARGET.spec <<EOF

%install
# Install kernel modules, if any
make $SMPFLAGS INSTALL_MOD_STRIP=1 modules_install ARCH=$KERNELARCH $CCOMP INSTALL_MOD_PATH=%{buildroot} INSTALL_DTBS_PATH=%{buildroot}/boot CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf-
# And DTBs -- allow failure here because old kernels (onyx08 and friends)
# don't have the dtbs_install target
make $SMPFLAGS INSTALL_MOD_STRIP=1 dtbs_install ARCH=$KERNELARCH $CCOMP INSTALL_MOD_PATH=%{buildroot} INSTALL_DTBS_PATH=%{buildroot}/boot CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- || :
cp arch/$KERNELARCH/boot/$KERNELTARGET %{buildroot}/boot/vmlinuz-$KERNELVERSION

%files
/boot/*
/lib/modules/*
EOF
	cd kernel-rpm
	rpmbuild -bb --noclean --target $ARCH --define "_sourcedir $(pwd)" --define "_specdir $(pwd)" --define "_srcrpmdir $(pwd)/SRPMS" --define "_rpmdir $(pwd)/RPMS"  kernel-$SHORTTARGET.spec 2>&1 |tee $OURDIR/kernelbuild.log
	cd ..
	KERNELRPM="$(ls $OURDIR/kernel-rpm/RPMS/*/*.rpm)"
else
	echo "KERNEL not specified in $TARGET config - assuming packaged kernel"
fi

# ===================================================================
# Generate root filesystem
# ===================================================================

# First of all let's find the right repo list...

ROOTDIR="${BASE_DISTRO}-$OMV_VERSION-$ARCH-root"

# Make sure we don't have any dangerous bind mounts left...
cleanup() {
	for mp in /proc /sys /dev/pts /dev; do
		[ -e "$OURDIR/$ROOTDIR$mp" ] && umount -Rq "$OURDIR/$ROOTDIR$mp" || :
	done
}
trap "cleanup; exit 1" ERR SIGINT SIGTERM

if [ -z "$KEEP_OLD_ROOT" ]; then
	cleanup
	rm -rf "$ROOTDIR"
fi

if [ ! -d "$ROOTDIR" ]; then
	mkdir -p $ROOTDIR

	# setup-rootfs can do things like create a filesystem and
	# loopback mount it on $ROOTDIR -- useful for boards that
	# need to generate a FS image file rather than a rootfs
	# tarball or so.
	[ -e $OURDIR/device/$TARGET/setup-rootfs ] && . $OURDIR/device/$TARGET/setup-rootfs

	# Poor man's version of "dnf install --installroot=" --
	# need to get the repository configs from rpm packages
	# without having the repositories configured...
	PKGS=${ABF_DOWNLOADS}/${VER_PREFIX}${OMV_VERSION}/repository/$ARCH/main/release/
	echo $PKGS
	curl -s -L $PKGS |grep '^<a' |cut -d'"' -f2 >PACKAGES
	for i in $PRE_PACKAGES; do
		P=$(grep "^$i-[0-9].*" PACKAGES |tail -n1)
		if [ "$?" != "0" ]; then
			echo "Can't find $i package for target" >&2
			exit 1
		fi
		curl -O $PKGS/$P
		rpm -r $OURDIR/$ROOTDIR -Uvh --ignorearch --nodeps $P
	done

	# Don't use mirrors when creating the image
	sed -i -e '/mirror.openmandriva.org/d;s,^	,baseurl=,' "$OURDIR/$ROOTDIR"/etc/yum.repos.d/*.repo

	if [ -n "$EXTRA_REPOS" ]; then
		for i in $EXTRA_REPOS; do
			dnf config-manager --installroot "$OURDIR/$ROOTDIR" --set-enabled $OMV_VERSION-$ARCH-$i
		done
	fi

	if ! $NATIVEBUILD; then
		# Make sure we can run %post scripts in the chroot
		mkdir -p $OURDIR/$ROOTDIR/usr/bin
		cp /usr/bin/qemu-$QEMUARCH-static $OURDIR/$ROOTDIR/usr/bin/
	fi

	# FIXME workaround for ldd being broken on aarch64 (at least in qemu)
	# (causes dracut to miss bash's dependencies)
	if [ "$ARCH" = "aarch64" ]; then
		PACKAGES="$PACKAGES ${XLDD}"
	fi
	if [ "$NEED_INITRD" != "no" ]; then
		PACKAGES="$PACKAGES dracut"
	fi
	if [ "$USE_UEFI" = "yes" ]; then
		PACKAGES="$PACKAGES efibootmgr grub2-efi"
	fi
	if [ "$USE_SYSTEMD_UEFI" = "yes" ]; then
		PACKAGES="$PACKAGES efibootmgr systemd-boot"
	fi

	PACKAGES="$PACKAGES $HWPACKAGES"

	# Mount relevant filesystems so %post scripts can access
	# the likes of /dev/null and /dev/urandom
	for mp in /proc /sys /dev /dev/pts; do
		mkdir -p "$OURDIR/$ROOTDIR$mp" || :
		mount --bind -o ro $mp "$OURDIR/$ROOTDIR$mp"
	done

	# FIXME workaround for distro-release-desktop-Plasma-Mobile and distro-release-desktop-Plasma
        # conflict. If mobile plasma is requared, desktop plasma config package should be excluded.

	EXCLUDE_PACKAGES=""

	if [ -n "$(echo $PACKAGES | grep -i -P -o 'distro-release-desktop-Plasma-Mobile')" ]; then
		EXCLUDE_PACKAGES="$EXCLUDE_PACKAGES distro-release-desktop-Plasma"
	fi

	EXCLUDE_OPTION=""

	if [ -n "$EXCLUDE_PACKAGES" ]; then
		EXCLUDE_OPTION="--exclude $EXCLUDE_PACKAGES"
	fi

	if [ -z $KEEP_OLD_ROOT ]; then
		if ! dnf -y install $EXCLUDE_OPTION --nogpgcheck --installroot=$OURDIR/$ROOTDIR --releasever=$OMV_VERSION --forcearch=$ARCH $WEAKDEPS $PACKAGES $KERNELRPM; then
			if [ -e $OURDIR/$ROOTDIR/bin/sh ]; then
				cat >&2 <<EOF
WARNING: dnf returned an error code, but it looks like installation finished.
This is likely something (relatively) harmless like a package's post-install
script failing - but you may want to double-check.
EOF
			else
				echo "ERROR: dnf failed without installing what looks like a workable system."
				exit 1
			fi
		fi
	fi

	# FIXME (continued) workaround for ldd being
	# broken on aarch64 (at least in qemu)
	# (causes dracut to miss bash's dependencies)
	if [ "$ARCH" = "aarch64" ]; then
		mv $OURDIR/$ROOTDIR/usr/bin/ldd $OURDIR/$ROOTDIR/usr/bin/ldd.glibc
		ln -sf xldd $OURDIR/$ROOTDIR/usr/bin/ldd
	fi

# set up system environment, default root password is omv
	systemd-firstboot --root="$OURDIR/$ROOTDIR" \
		--locale="en_US.UTF-8" \
		--keymap="us" \
		--timezone="Europe/London" \
		--hostname="omv-$(printf '%s\n' ${TARGET} | cut -d '/' -f 2 |sed -e 's,+,,g')" \
		--root-password-hashed='$6$rG3bQ92hkTNubV1p$5qPB9FoXBhNcSE1FOklCoEDowveAgjSf2cHYVwCENZaWtgpFQaRRRN5Ihwd8nuaKMdA1R1XouOasJ7u5dbiGt0' \
		--force

# set up dirs
	systemd-tmpfiles --root="$OURDIR/$ROOTDIR" -E --remove

# set up users
	systemd-sysusers --root="$OURDIR/$ROOTDIR" || :

	# Remove anything created by systemd-tmpfiles and friends that will
	# be hidden by tmpfs mounts anyway
	rm -rf "$OURDIR/$ROOTDIR/run/* $OURDIR/$ROOTDIR/tmp/*"

	# Remove anything created by systemd-tmpfiles and friends that will
	# be hidden by tmpfs mounts anyway
	rm -rf "$OURDIR/$ROOTDIR/run/* $OURDIR/$ROOTDIR/tmp/*"

	if ! grep -q '^omv:' $OURDIR/$ROOTDIR/etc/passwd; then
		# Create omv user (password omv)
		echo 'omv:x:1001:1001::/home/omv:/bin/bash' >>$OURDIR/$ROOTDIR/etc/passwd
		echo 'omv:$6$rG3bQ92hkTNubV1p$5qPB9FoXBhNcSE1FOklCoEDowveAgjSf2cHYVwCENZaWtgpFQaRRRN5Ihwd8nuaKMdA1R1XouOasJ7u5dbiGt0:17302:0:99999:7:::' >>$OURDIR/$ROOTDIR/etc/shadow
		echo 'omv:x:1001:' >>$OURDIR/$ROOTDIR/etc/group
		# Add the omv user to important groups...
		for group in audio dialout input lp lpadmin network render sambashare screen storage tty users video wheel; do
			sed -i -e "s,$group:.*\$,&omv," $OURDIR/$ROOTDIR/etc/group
		done
		cp -a $OURDIR/$ROOTDIR/etc/skel $OURDIR/$ROOTDIR/home/omv
		chown -R 1001:1001 $OURDIR/$ROOTDIR/home/omv

		# If sddm is installed, set it up to autologin as omv
		if [ -z "$SDDMSESSION" ]; then
			for desktop in plasma lxqt openbox failsafe; do
				if [ -e $OURDIR/$ROOTDIR/usr/share/xsessions/$desktop.desktop ]; then
					SDDMSESSION=$desktop
					break
				fi
			done
			if [ -z "$SDDMSESSION" ]; then
				for desktop in plasma-mobile plasmawayland weston; do
					if [ -e "$OURDIR/$ROOTDIR"/usr/share/wayland-sessions/$desktop.desktop ]; then
						SDDMSESSION=$desktop
						break
					fi
				done
			fi
		fi
		if [ -z "$NO_AUTOLOGIN" ] && [ -e "$OURDIR/$ROOTDIR/etc/sddm.conf" ]; then
			sed -i -e "s,^User=,User=omv," $OURDIR/$ROOTDIR/etc/sddm.conf
		fi
		if [ -n "$SDDMSESSION" ] && [ -e "$OURDIR/$ROOTDIR/etc/sddm.conf" ]; then
			sed -i -e "s,^Session=,Session=$SDDMSESSION," $OURDIR/$ROOTDIR/etc/sddm.conf
		fi
	fi
	if [ -z "$KERNEL" ]; then
		# Using packaged kernel -- let's determine KERNELVERSION
		# nevertheless so we can run dracut and possibly configure
		# bootloaders
		KERNELVERSION=$(ls --sort=time $OURDIR/$ROOTDIR/boot/vmlinuz-* 2>/dev/null|head -n1 |sed -e 's,.*vmlinuz-,,')
	fi
	# Handle post-processing scripts needed by packagesets
	for i in $PACKAGESETS; do
		[ -e "$OURDIR/packagesets/$1.post" ] && chroot "$OURDIR/$ROOTDIR" "$OURDIR/packagesets/$1.post"
	done

	run setup-system-files
	if [ "$NEED_INITRD" != "no" ] || [ "$USE_UEFI" = "yes" ] || [ "$USE_SYSTEMD_UEFI" != "yes" ] && [ -n "$KERNELVERSION" ]; then
		if [ "$NEED_INITRD" != "no" ]; then
			run generate-initrd
		fi
		if [ "$USE_UEFI" = "yes" ]; then
			printf '%s\n' "Creating ESP for GRUB."
			mkdir -p $OURDIR/$ROOTDIR/boot/efi/EFI/BOOT
			chroot "$OURDIR/$ROOTDIR" /usr/bin/grub2-mkimage -o /boot/efi/EFI/BOOT/$BOOTEFI -O $EFIARCH -p /EFI/BOOT fat part_gpt part_msdos normal boot linux configfile loopback chain efifwsetup efi_gop ls search search_label search_fs_uuid search_fs_file gfxterm gfxterm_background gfxterm_menu test all_video loadenv exfat ext2
		fi

		if [ "$USE_SYSTEMD_UEFI" = "yes" ]; then
			printf '%s\n' "Creating ESP for systemd-boot."
			mkdir -p $OURDIR/$ROOTDIR/boot/efi
			# create ESP directory scheme for systemd-boot
			for i in "$OURDIR/$ROOTDIR/boot/efi/EFI/BOOT" "$OURDIR/$ROOTDIR/boot/efi/EFI/Linux" "$OURDIR/$ROOTDIR/boot/efi/EFI/systemd" "$OURDIR/$ROOTDIR/boot/efi/loader/entries"; do
				mkdir -p $i
			done

			if [ ! -s "$OURDIR/$ROOTDIR"/usr/lib/kernel/cmdline ]; then
				printf '%s\n' 'root=LABEL=OMVAA64' >> "$OURDIR/$ROOTDIR"/usr/lib/kernel/cmdline
				for i in ${CMDLINE[@]}; do
					printf '%s\n' "$i" >> "$OURDIR/$ROOTDIR"/usr/lib/kernel/cmdline
				done
			fi

#			chroot "$OURDIR/$ROOTDIR" SYSTEMD_RELAX_ESP_CHECKS=1 bootctl install --esp-path=/boot/efi
			cp -a "$OURDIR/$ROOTDIR"/usr/lib/systemd/boot/efi/systemd-bootaa64.efi $OURDIR/$ROOTDIR/boot/efi/EFI/BOOT/BOOTAA64.efi
			cp -a "$OURDIR/$ROOTDIR"/usr/lib/systemd/boot/efi/systemd-bootaa64.efi $OURDIR/$ROOTDIR/boot/efi/EFI/systemd
			MACH_ID=$(chroot $OURDIR/$ROOTDIR systemd-machine-id-setup --print)
			mkdir -p "$OURDIR/$ROOTDIR/boot/efi/$MACH_ID"
			chroot "$OURDIR/$ROOTDIR" kernel-install -v add "$KERNELVERSION" "/boot/vmlinuz-$KERNELVERSION"
# tricky part, looks like uboot does not support gziped kernel image in UEFI mode
# so lets gunzip it
			mv "$OURDIR/$ROOTDIR/boot/efi/$MACH_ID/$KERNELVERSION"/linux "$OURDIR/$ROOTDIR/boot/efi/$MACH_ID/$KERNELVERSION"/linux.gz
			gunzip "$OURDIR/$ROOTDIR/boot/efi/$MACH_ID/$KERNELVERSION"/linux.gz
			cat >$OURDIR/$ROOTDIR/boot/efi/loader/loader.conf<<EOF
default $MACH_ID-$KERNELVERSION.conf
timeout 10
EOF
			sed -i -e 's,boot\/efi\/,\/,g' "$OURDIR/$ROOTDIR"/boot/efi/loader/entries/$MACH_ID-$KERNELVERSION.conf
			if [ -n ${DTB} ] && ! grep -q devicetree $OURDIR/$ROOTDIR/boot/efi/loader/entries/$MACH_ID-$KERNELVERSION.conf; then
				install -D -m644 "$OURDIR/$ROOTDIR/boot/dtb-$KERNELVERSION/${DTB}.dtb" "$OURDIR/$ROOTDIR/boot/efi/$MACH_ID/$KERNELVERSION/dtb/${DTB}.dtb"
				printf '%s\n' "devicetree "/$MACH_ID/$KERNELVERSION"/dtb/$DTB.dtb" >> $OURDIR/$ROOTDIR/boot/efi/loader/entries/$MACH_ID-$KERNELVERSION.conf
			fi
			dd if=/dev/random of="$OURDIR/$ROOTDIR/boot/efi/loader/"random-seed bs=512 count=1
			chmod +x -R $OURDIR/$ROOTDIR/boot/efi
		fi

	fi

	# Initialize the random seed to something, systemd might hang forever on
	# e.g. an embedded board that doesn't get entropy
	dd if=/dev/random of="$OURDIR/$ROOTDIR"/var/lib/systemd/random-seed bs=512 count=1
	chmod 0600 "$OURDIR/$ROOTDIR"/var/lib/systemd/random-seed

	# Make sure default services are started
	for i in "$OURDIR/$ROOTDIR"/lib/systemd/system-preset/*.preset; do
		while read r; do
			TYPE="$(echo $r |awk '{ print $1; }')"
			if [ "$TYPE" = "enable" ] || [ "$TYPE" = "disable" ]; then
				[ "$(echo "$r" |awk '{ print $2; }')" = '*' ] && continue
				chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl $r || :
			fi
		done < $i
	done

	# Some devices require special alsa configs to initialize
	# (e.g. unmuted DAC).
	# Since /var/lib/alsa/asound.state is restored (and stored) by
	# our systemd files, it's better to just initialize that (and
	# not overwrite newly saved states by a package update) than to
	# ship the file in a package.
	if [ -e "$OURDIR"/device/$TARGET/asound.state ]; then
		mkdir -p "$OURDIR/$ROOTDIR"/var/lib/alsa
		install -c -m 644 "$OURDIR"/device/$TARGET/asound.state "$OURDIR/$ROOTDIR"/var/lib/alsa/asound.state
	fi

	# Make sure key services are started even if they're omitted
	# in the preset files
	chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl enable getty@tty1.service
	[ -e "$OURDIR/$ROOTDIR"/lib/systemd/system/simplelogin.service ] && chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl enable simplelogin
	[ -e "$OURDIR/$ROOTDIR"/lib/systemd/system/sddm.service ] && chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl enable sddm
	if [ -e "$OURDIR/$ROOTDIR/lib/systemd/system/sddm.service" ] || [ -e "$OURDIR/$ROOTDIR/lib/systemd/system/simplelogin.service" ]; then
		chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl set-default graphical.target
	else
		chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl set-default multi-user.target
	fi
	# At least while we're mostly dealing with headless boards
	[ -e "$OURDIR/$ROOTDIR/lib/systemd/system/sshd.service" ] && chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl enable sshd
	for i in $SERVICES; do
		if [ -e "$OURDIR/$ROOTDIR/lib/systemd/system/$i.service" ]; then
			chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl enable $i
		else
			echo "WARNING: Service $i requested, but not installed" >&2
		fi
	done

	if [ -x "$OURDIR/$ROOTDIR"/usr/bin/fc-cache ]; then
	    # set the timestamp on the directories to be a whole second
	    # fc-cache looks at the nano second portion which will otherwise be
	    # non-zero as we are on ext4, but then it will compare against the stamps
	    # on the squashfs live image, squashfs only has second level timestamp resolution
	    FCTIME=$(date +%Y%m%d%H%M.%S)
	    chroot "$OURDIR/$ROOTDIR" find /usr/share/fonts -type d -exec touch -t "$FCTIME" {} \;
	    chroot "$OURDIR/$ROOTDIR" fc-cache -rf
	    chroot "$OURDIR/$ROOTDIR" /bin/mkdir -p /root/.cache/fontconfig/
	    chroot "$OURDIR/$ROOTDIR" /bin/mkdir -p /home/omv/.cache/fontconfig/
	fi

	# Rebuild man-db
	[ -x "$OURDIR/$ROOTDIR"/usr/bin/mandb ] && chroot "$OURDIR/$ROOTDIR" /usr/bin/mandb --quiet

	# Rebuild mime database
	[ -x "$OURDIR/$ROOTDIR"/usr/bin/update-mime-database ] && chroot "$OURDIR/$ROOTDIR" /usr/bin/update-mime-database /usr/share/mime

	chroot "$OURDIR/$ROOTDIR" /sbin/ldconfig

	for i in etc var; do
	    printf "%s\n" 'File created by os-image-builder. See systemd-update-done.service(8).' > "$OURDIR/$ROOTDIR/$i"/.updated
	done

	cd "$OURDIR/$ROOTDIR"
	run postprocess
	cleanup
	# There shouldn't be any files in the root filesystem. If there are any,
	# they're probably core dump files generated by qemu while running systemctl
	# and friends.
	for i in *; do
		[ -f "$i" ] && rm -f "$i"
	done
	cd ..
else
	# Mount relevant filesystems so generate-bootimg can use
	# the likes of /dev/null and /dev/urandom in chroot
	for mp in /proc /sys /dev /dev/pts; do
		mkdir -p "$OURDIR/$ROOTDIR$mp" || :
		mount --bind -o ro $mp "$OURDIR/$ROOTDIR$mp"
	done
fi

# Reinstall distro-release-repos to get mirrors back

[ -z $KEEP_OLD_ROOT ] && dnf -y reinstall --installroot="$OURDIR/$ROOTDIR" --releasever=$OMV_VERSION --forcearch=$ARCH ${PRE_PACKAGES}
[ -d "$OURDIR/$ROOTDIR/var/cache/dnf" ] && rm -rf "$OURDIR/$ROOTDIR/var/cache/dnf/*"
BASENAME="${BASE_DISTRO}-${SHORTTARGET}-${OS_VERSION}"

# generate-bootimg and generate-rootfs can write to results.
# Wipe it clean and make sure it exists
rm -rf results ; mkdir results

run generate-bootimg
# Stuff in virtual filesystems should not make it to
# root filesystems...
cleanup
run generate-rootfs

xz -ef9 results/*.img || :

# All of the following are allowed to fail because not
# every board needs/produces every one of them
mv *.img* results/ 2>/dev/null || :
mv *.tar* results/ 2>/dev/null || :
cp -a device/${TARGET}/*.md results/ 2>/dev/null || :
cp -a device/${TARGET}/write2sd results/ 2>/dev/null || :

for i in device/${TARGET}/*.md.in device/${TARGET}/write2sd.in; do
	[ -e "$i" ] || continue
	r="results/$(basename $i .in)"
	sed -e "s,@OS_VERSION@,${OS_VERSION},g;s,@OMV_VERSION@,${OMV_VERSION},g;s,@BASENAME@,${BASENAME},g" $i >"$r"
	[ -x "$i" ] && chmod 0755 "$r"
done

if [ "$ABF" = "1" ]; then
	# Make sure the remaining scripts have sufficient access
	chown -R omv:omv results
fi

printf '%s\n' 'Building has finished.'
