#!/bin/bash

set -e

listTargets() {
	find device -name config |while read r; do
		dirname $r |cut -d/ -f2-
	done
}
usage() {
	printf '%s\n' "Usage: $0 [ -v VERSION ] target"
	printf '%s\n' "	-v: Use ${BASE_DISTRO} VERSION (default: cooker)"
	printf '%s\n' "	-K: Keep already existing build root (default: no)"
	printf '%s\n' "Available targets:"
	listTargets
}
run() {
	local SCRIPT="$1"
	shift
	printf '%s\n' "Running $SCRIPT"
	if [ -e $OURDIR/device/$TARGET/$SCRIPT ]; then
		. $OURDIR/device/$TARGET/$SCRIPT "$@"
	else
		local T="$TARGET"
		local DONE=false
		while [ "$T" != "." ]; do
			T="$(dirname $T)"
			if [ -e $OURDIR/device/$T/generic/$SCRIPT ]; then
				. $OURDIR/device/$T/generic/$SCRIPT "$@"
				break
			fi
		done
	fi
}
isnative() {
	local CPU=$(printf '%s\n' $1 |cut -d- -f1)
	local ABI=$(printf '%s\n' $1 |rev |cut -d- -f1 |rev)
	local NATIVECPU=$(uname -m)
	local NATIVEABI=gnu
	if ldd /bin/sh |grep -q musl; then
		NATIVEABI=musl
	fi
	if printf '%s\n' $NATIVECPU |grep -q ^arm; then
		NATIVEABI="${NATIVEABI}eabihf"
		NATIVECPU="armv7hnl"
	fi
	[ "$CPU" = "znver1" ] && CPU=x86_64
	if [ "$CPU" = "$NATIVECPU" ] && [ "$ABI" = "$NATIVEABI" ]; then
		return 0
	else
		return 1
	fi
}
rescanPartitions () {
	udevadm settle -t 5
	partx -a $1 || :
	partx -u $1
	udevadm settle -t 5
	# Workaround for /dev/loopXpY device nodes not being created
	# inside the isobuilder container in ABF -- this shouldn't
	# run in a normal environment (but can't hurt either)
	for i in $(partx -go NR $1); do
		if ! [ -e $1p$i ]; then
			local LDEV="$(basename $1)"
			local NODE="$(cat /sys/block/$LDEV/${LDEV}p${i}/dev)"
			mknod /dev/${LDEV}p${i} b ${NODE/:*/} ${NODE/*:/}
		fi
	done
}

if [ "$(id -u)" != "0" ]; then
	printf '%s\n' "Need root privileges to set ownership of extracted files."
	exec sudo $0 -u "$(id -un)" "$@"
	exit 1
fi

OURDIR="$(realpath $(dirname $0))"
cd "$OURDIR"

PACKAGES=""
PACKAGES_FROM_CMDLINE=""
PACKAGESETS="core"
SERVICES="dbus-broker NetworkManager"
WEAKDEPS=""
HOSTDEPS="dnf5"
if command -v clang-cpp &>/dev/null; then
	CPP="clang-cpp"
elif command -v cpp &>/dev/null; then
	CPP="cpp"
else
	HOSTDEPS="$HOSTDEPS clang"
	CPP="clang-cpp"
fi

# for rosa it is http://abf-downloads.rosalinux.ru
ABF_DOWNLOADS="${ABF_DOWNLOADS:-https://abf-downloads.openmandriva.org}"
# for rosa it is rosa-linux-gnu
BASE_TRIPLET="${BASE_TRIPLET:-openmandriva-linux-gnu}"
# ver prefix needed only for rosalinux
# should be just rosa
VER_PREFIX="${VER_PREFIX:-}"
# for rosa it is 2021.1
OMV_VERSION="${OMV_VERSION:-cooker}"
# for rosa it is RosaLinux
BASE_DISTRO="${BASE_DISTRO:-OpenMandriva-Lx}"
BUILDUSER="$(ls -ld ${OURDIR} |cut -d' ' -f3)"

# install xldd only on OpenMandriva
if [ $BASE_DISTRO = "OpenMandriva-Lx" ]; then
	XLDD="xldd"
	CROSS_ARM="cross-armv7hnl-openmandriva-linux-gnueabihf-gcc"
else
	XLDD=""
	CROSS_ARM=""
fi

# for rosa it is rosa-repos-main
PRE_PACKAGES="${PRE_PACKAGES:-distro-release-repos}"
[ -z "$FINAL" ] && FINAL=false
OS_VERSION=""
IDENTIFIER=""
while getopts "d:Fi:Kn:o:p:P:r:s:S:u:v:w:W" opt; do
	case $opt in
	d)
		SDDMSESSION="$OPTARG"
		;;
	F)
		FINAL=true
		;;
	i)
		IDENTIFIER="$OPTARG"
		;;
	K)
		KEEP_KERNEL_RPM=true
		;;
	v)
		OMV_VERSION="$OPTARG"
		;;
	o)
		OS_VERSION="$OPTARG"
		;;
	p)
		PACKAGES_FROM_CMDLINE="$PACKAGES_FROM_CMDLINE ${OPTARG}"
		;;
	P)
		if ! [ -e "$OURDIR/packagesets/${OPTARG}.pkgs" ]; then
			printf '%s\n' "Unknown packageset: ${OPTARG}" >&2
			exit 1
		fi
		PACKAGESETS="$PACKAGESETS ${OPTARG}"
		;;
	r)
		EXTRA_REPOS="$EXTRA_REPOS ${OPTARG}"
		;;
	s)
		SERVICES="$SERVICES ${OPTARG}"
		;;
	S)
		SERVICES="$(printf '%s\n' $SERVICES |sed -e "s,^${OPTARG} ,,;s, ${OPTARG} , ,;s,^${OPTARG}\$,,;s, ${OPTARG}\$,,")"
		;;
	u)
		BUILDUSER="${OPTARG}"
		;;
	w)
		WEAKDEPS="--setopt=install_weak_deps=True"
		;;
	W)
		WEAKDEPS="--setopt=install_weak_deps=False"
		;;
	n)
		IMAGENAME="${OPTARG}"
		;;
	*)
		printf '%s\n' "Unknown option $opt" >&2
		usage
		exit 1
		;;
	esac
done
shift $((OPTIND-1))

if [ -z "$1" ]; then
	usage
	exit 1
fi

if [ -z "$OS_VERSION" ]; then
	[ -n "$IDENTIFIER" ] && OS_VERSION="$IDENTIFIER-"
	OS_VERSION="$OS_VERSION$OMV_VERSION"
	if [ "$FINAL" = "false" ]; then
		# BUILD_ID is set by abf
		if [ -n "${BUILD_ID}" ]; then
			OS_VERSION="${OS_VERSION}-${BUILD_ID}"
		else
			OS_VERSION="${OS_VERSION}-$(date +%Y%m%d)"
		fi
	fi
fi

TARGET="$1"
if ! [ -e device/$TARGET/config ]; then
	# Allow abbreviations, e.g. db410c instead of qualcomm/db410c
	for i in $(find device -name config); do
		if printf '%s\n' $i |grep -q "$TARGET/config\$"; then
			TARGET="$(dirname $i |cut -d/ -f2-)"
			break
		fi
	done
fi
if ! [ -e device/$TARGET/config ]; then
	printf '%s\n' "Invalid target $TARGET"
	usage
	exit 1
fi
SHORTTARGET="$(basename $TARGET)"

printf '%s\n' "Building ${BASE_DISTRO} $OMV_VERSION image for $TARGET"
run config
[ -n "$HWPACKAGESETS" ] && PACKAGESETS="$PACKAGESETS $HWPACKAGESETS"

# ===================================================================
# Prepare host system
# ===================================================================
if [ -z "$ARCH" ]; then
	printf '%s\n' "$TARGET doesn't specify ARCH, assuming aarch64" >&2
	ARCH=aarch64
fi

TRIPLET=$ARCH-${BASE_TRIPLET}
case $ARCH in
aarch64)
	KERNELARCH=arm64
	QEMUARCH=aarch64
	# We allow overriding KERNELTARGET in configs because
	# some bootloaders support gzipped images, some don't
	[ -z "$KERNELTARGET" ] && KERNELTARGET=Image.gz
	BOOTEFI=bootaa64.efi
	EFIARCH=arm64-efi
	DTBS="dtbs"
	;;
arm*)
	KERNELARCH=arm
	QEMUARCH=arm
	TRIPLET="${TRIPLET}eabihf"
	KERNELTARGET=zImage
	BOOTEFI=bootarm.efi
	EFIARCH=arm-efi
	DTBS="dtbs"
	;;
x86_64|znver1)
	KERNELARCH=x86
	QEMUARCH=x86_64
	KERNELTARGET=vmlinux
	BOOTEFI=bootx64.efi
	EFIARCH=x86_64-efi
	DTBS=""
	;;
i686)
	KERNELARCH=x86
	QEMUARCH=i386
	KERNELTARGET=vmlinuz
	BOOTEFI=bootia32.efi
	EFIARCH=i386-efi
	DTBS=""
	;;
riscv64)
	KERNELARCH=riscv
	QEMUARCH=$ARCH
	KERNELTARGET=vmlinux
	BOOTEFI=boot${ARCH}.efi
	EFIARCH=${ARCH}-efi
	DTBS="dtbs"
	;;
*)
	# Anything here is possibly wrong...
	KERNELARCH=$ARCH
	QEMUARCH=$ARCH
	KERNELTARGET=vmlinuz
	BOOTEFI=boot${ARCH}.efi
	EFIARCH=${ARCH}-efi
	DTBS="dtbs"
	;;
esac

NATIVEBUILD=false
[ "$ARCH" = "$(uname -m)" ] && NATIVEBUILD=true

if [ -n "$KERNEL" ]; then
	# We aren't using a packaged kernel, so we need the right toolchain...
	if isnative $TRIPLET; then
		HOSTDEPS="$HOSTDEPS gcc"
	else
		HOSTDEPS="$HOSTDEPS cross-$TRIPLET-gcc cross-$TRIPLET-libc cross-$TRIPLET-kernel-headers"
	fi
	if [ "$ARCH" = "aarch64" ]; then
		# Many aarch64 kernels (e.g. rk3399) need a 32-bit ARM compiler
		# to target a helper Cortex-M0 etc.
		HOSTDEPS="$HOSTDEPS ${CROSS_ARMHF}"
	fi
	# Build dependencies for binary formats etc.
	HOSTDEPS="$HOSTDEPS pkgconfig(libelf) zstd"
fi
$NATIVEBUILD || HOSTDEPS="$HOSTDEPS qemu-static-$QEMUARCH"
# vim-common is for xxd, used to decode EDID information for pinebookpro
HOSTDEPS="$HOSTDEPS bc curl make pahole clang gcc dtc glibc-devel bison flex lib64openssl-devel hostname patch vim-common rpm-build kpartx util-linux gptfdisk e2fsprogs f2fs-tools"

if [ -n "$UBOOT_CONFIG" ]; then
	HOSTDEPS="$HOSTDEPS u-boot-tools"
fi

if [ -n "$HOSTDEPS" ]; then
	if ! dnf5 -y --refresh --nogpgcheck install $HOSTDEPS; then
		for i in $HOSTDEPS; do
			if ! rpm -q $i &>/dev/null; then
				printf '%s\n' "Couldn't install needed HOST tools. Make sure you're running current ${BASE_DISTRO}"
				printf '%s\n' "or install $i manually"
				exit 1
			fi
		done
	fi

	# Make sure the binfmt handler knows about any qemu-static bits we may have installed...
	# We also need ld-linux-aarch64.so.1 symlinked to where some binary headers expect it
	if [ !"$ARCH" = "aarch64" ]; then
		HOSTDEPS="$HOSTDEPS"
		printf '%s\n' ':aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff:/usr/bin/qemu-aarch64-static:' >/proc/sys/fs/binfmt_misc/register || :
		[ -e /lib/ld-linux-aarch64.so.1 ] || ln -s /usr/$TRIPLET/lib/ld-linux-aarch64.so.1 /lib/
	fi
fi

# ===================================================================
# Parse packagesets and add target specific packageset extensions
# (e.g. graphics drivers for the gui package set) specified in the
# config (e.g. HWPACKAGES_gui=...)
# Also, re-parse packages specified on the command line in case they
# contain macros
# ===================================================================
if printf '%s' $ARCH |grep -qE '(64|znver1)'; then
	LIB=lib64
else
	LIB=lib
fi
CPP="$CPP -undef -nostdinc -P -E -Wno-unused-command-line-argument -I$OURDIR/packagesets -DLIB(x)=${LIB}##x -DARCH_$ARCH=1 -DTARGET_$(printf '%s\n' $TARGET|sed -e 's,/,_,g;s,-,_,g')=1 -DTARGET_$(printf '%s' $SHORTTARGET|sed -e 's,/,_,g;s,-,_,g')=1"
for ps in $PACKAGESETS; do
	CPP="$CPP -DPACKAGESET_${ps}=1"
done
for p in $PACKAGES_FROM_CMDLINE; do
	PACKAGES="$PACKAGES $(printf '%s' $p |$CPP -)"
done
for ps in $PACKAGESETS; do
	eval "XP=\${HWPACKAGES_${ps}}"
	if [ -n "$XP" ]; then
		PACKAGES="$PACKAGES $(printf '%s' $XP |$CPP -)"
	fi
	while read p; do
		PACKAGES="$PACKAGES $p"
	done < <($CPP $OURDIR/packagesets/${ps}.pkgs)
done


# ===================================================================
# Build kernel if necessary
# ===================================================================

SMPFLAGS="-j$(getconf _NPROCESSORS_ONLN)"
[ "$SMPFLAGS" = "-j" ] && SMPFLAGS="-j8"

if isnative $TRIPLET; then
	CCOMP=""
else
	CCOMP="CROSS_COMPILE=/usr/bin/$TRIPLET-"
fi

# This should usually not be used in production builds.
# It keeps the kernel rpm from a previous run, just
# building everything else.
# It is primarily useful while debugging package installation
# or debugging bootup errors in the running system.
if [ -n "$KEEP_KERNEL_RPM" ]; then
	ls $OURDIR/kernel-rpm/RPMS/*/*.rpm 2>/dev/null || unset KEEP_KERNEL_RPM
fi

if [ -n "$KEEP_KERNEL_RPM" ]; then
	KERNELRPM="$(ls $OURDIR/kernel-rpm/RPMS/*/*.rpm)"
elif [ -n "$KERNEL" ]; then
	printf '%s\n' "Building $TARGET kernel"
	KERNELREPO="$(printf '%s' $KERNEL |cut -d'#' -f1)"
	KERNELBRANCH="$(printf '%s' $KERNEL |cut -d'#' -f2-)"
	[ -n "$KERNELBRANCH" ] && KERNELBRANCH="-b $KERNELBRANCH"
	[ -z "$KERNEL_CONFIG" ] && KERNEL_CONFIG="defconfig"
	rm -rf kernel
	if [ -z "$KERNELBUNDLE" ]; then
		if ! git clone --depth 1 $KERNELBRANCH $KERNELREPO kernel; then
			# KERNELBRANCH is a tag or commit hash, not a branch
			git clone $KERNELREPO kernel
			cd kernel
			git checkout $KERNELBRANCH $(echo $KERNELBRANCH |cut -b4-)
			cd ..
		fi
	else
		# Very special case, but the megi kernel that relies on it
		# is very important for several targets...
		git clone $KERNELREPO kernel
		cd kernel
		curl -o .bundle "$KERNELBUNDLE"
		git fetch .bundle '+refs/heads/*:refs/remotes/bundle/*'
		git checkout -b $KERNELBRANCH bundle/$KERNELBRANCH
		git gc --aggressive --prune=all
		rm .bundle
		cd ..
	fi
	cd kernel
	# Bogus naming, e.g. "rock-5b.config", in some kernels
	if echo $KERNEL_CONFIG |grep -q '\.config'; then
		cp arch/arm64/configs/${KERNEL_CONFIG} arch/arm64/configs/${KERNEL_CONFIG/.config/_defconfig}
		KERNEL_CONFIG=${KERNEL_CONFIG/.config/_defconfig}
	fi
	[ -e scripts/lld-version.sh ] && sed -i -e "s,' ' -f 2,' ' -f 4," scripts/lld-version.sh
	PN=1
	for i in ${OURDIR}/device/${TARGET}/kernel-patches/*.patch ${OURDIR}/device/${TARGET}/kernel-patches/*.diff; do
		printf '%s\n' "Applying $(basename $i)" >&2
		[ -e "$i" ] && patch -p1 -b -z .b${PN}~ <$i
		PN=$((PN+1))
	done
	for i in ${OURDIR}/device/${TARGET}/kernel-patches/*.gitpatch; do
		printf '%s\n' "Applying $(basename $i)" >&2
		[ -e "$i" ] && git apply $i
	done
	# Get rid of bracketed version identifier that freaks out
	# rpm's dependency generator
	sed -i -E 's,(.*)"\["(.*)"\]"(.*),\1"-"\2""\3,' drivers/scsi/aacraid/linit.c
	run download_kernel_extras

	[ -e ${OURDIR}/device/${TARGET}/../generic/${KERNEL_CONFIG} ] && cp -f ${OURDIR}/device/${TARGET}/../generic/${KERNEL_CONFIG} arch/${KERNELARCH}/configs/
	[ -e ${OURDIR}/device/${TARGET}/${KERNEL_CONFIG} ] && cp -f ${OURDIR}/device/${TARGET}/${KERNEL_CONFIG} arch/${KERNELARCH}/configs/
	# Get rid of trailing + in version identifiers
	sed -i -e 's,"+","",g' scripts/setlocalversion
	if [ -n "$KERNEL_EXTRA_CFLAGS_GCC" ] && [ "$KERNEL_GCC" = "yes" ]; then
		sed -i -e "s|-std=gnu89|$KERNEL_EXTRA_CFLAGS_GCC -std=gnu89|g" Makefile
	fi
	if [ -n "$KERNEL_EXTRA_CFLAGS_CLANG" ] && [ "$KERNEL_GCC" != "yes" ]; then
		sed -i -e "s|-std=gnu89|$KERNEL_EXTRA_CFLAGS_CLANG -std=gnu89|g" Makefile
	fi
	if [ -n "$KERNEL_EXTRA_CFLAGS" ]; then
		sed -i -e "s|-std=gnu89|$KERNEL_EXTRA_CFLAGS -std=gnu89|g" Makefile
	fi
	# Get rid of the "-dirty" name in localversion
	git add -A || :
	git commit -am "Apply OpenMandriva patches" || :

	if [ "$KERNEL_GCC" = "yes" ]; then
		make $SMPFLAGS ARCH=$KERNELARCH $CCOMP $KERNEL_CONFIG include/config/kernel.release
	else
		make $SMPFLAGS ARCH=$KERNELARCH $CCOMP LLVM=1 $KERNEL_CONFIG include/config/kernel.release
	fi
	KERNELVERSION=$(cat include/config/kernel.release)
	KERNELVERSION_NUM="$(printf '%s\n' $KERNELVERSION |cut -d- -f1)"
	if printf '%s\n' $KERNELVERSION |grep -q -- -; then
		KERNELVERSION_EXTRA="$(printf '%s\n' $KERNELVERSION |cut -d- -f2- |sed -e 's,-,.,g')"
	fi
	cd ..

	rm -rf kernel-rpm
	mkdir kernel-rpm
	tar cf kernel-rpm/kernel.tar kernel
	zstd -T0 -19 --rm kernel-rpm/kernel.tar
	cat >kernel-rpm/kernel-$SHORTTARGET.spec <<EOF
%define debug_package %{nil}

Name:		kernel-$SHORTTARGET
Version:	$KERNELVERSION_NUM
EOF

	if [ -n "$KERNELVERSION_EXTRA" ]; then
		printf '%s\n' "Release:	0.$KERNELVERSION_EXTRA.1" >>kernel-rpm/kernel-$SHORTTARGET.spec
	else
		printf '%s\n' "Release:	1" >>kernel-rpm/kernel-$SHORTTARGET.spec
	fi
	cat >>kernel-rpm/kernel-$SHORTTARGET.spec <<EOF
Summary:	kernel for $SHORTTARGET devices
BuildRequires:	gnutar
# Tarball generated from the $KERNELBRANCH branch
# of $KERNELREPO
# by os-image-builder
Source0:	kernel.tar.zst
License:	GPLv2
Provides:	kernel = %{EVRD}
Provides:	kernel-release = %{EVRD}

EOF

	cat >>kernel-rpm/kernel-$SHORTTARGET.spec <<EOF
%description
kernel for $SHORTTARGET devices

%prep
%autosetup -p1 -n kernel

%build
export PATH=%{_libexecdir}/gnutar:${PATH}
EOF

	# CROSS_COMPILE_ARM32 is a Sony-ism, but doesn't hurt anywhere else, so we can specify it unconditionally
	# FIXME we have to use LD=/usr/bin/$TRIPLET-ld.bfd, for some reason yet to be debugged, aarch64
	# kernels linked with lld don't boot on emag/oci-aarch64 (kernel 5.16-rc4, clang 13.0.0)
	if isnative $TRIPLET; then
		if [ "$KERNEL_GCC" = "yes" ]; then
			KERNEL_LD="LD=ld.bfd"
		fi
	else
		if [ "$KERNEL_GCC" = "yes" ]; then
			KERNEL_LD="LD=/usr/bin/$TRIPLET-ld.bfd"
		fi
	fi
	if [ "$KERNEL_GCC" = "yes" ]; then
		printf '%s\n' "%make_build $SMPFLAGS ARCH=$KERNELARCH $CCOMP CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- $KERNEL_LD $KERNEL_CONFIG" >>kernel-rpm/kernel-$SHORTTARGET.spec
	else
		printf '%s\n' "%make_build $SMPFLAGS ARCH=$KERNELARCH CLANG_TRIPLE=$TRIPLET- $CCOMP CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- CC=clang LLVM=1 $KERNEL_CONFIG" >>kernel-rpm/kernel-$SHORTTARGET.spec
	fi
	if [ -n "$KERNEL_EXTRACONFIG" ]; then
		printf '%s\n' "scripts/config $KERNEL_EXTRACONFIG" >>kernel-rpm/kernel-$SHORTTARGET.spec
	fi
	if [ "$KERNEL_GCC" = "yes" ]; then
		printf '%s\n' "make syncconfig ARCH=$KERNELARCH $CCOMP CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- $KERNEL_LD" >>kernel-rpm/kernel-$SHORTTARGET.spec
		printf '%s\n' "%make_build $KERNELTARGET $DTBS modules ARCH=$KERNELARCH $CCOMP CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- $KERNEL_LD" >>kernel-rpm/kernel-$SHORTTARGET.spec
	else
		printf '%s\n' "make syncconfig ARCH=$KERNELARCH CLANG_TRIPLE=$TRIPLET- $CCOMP CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- CC=clang LLVM=1" >>kernel-rpm/kernel-$SHORTTARGET.spec
		printf '%s\n' "%make_build $KERNELTARGET $DTBS modules ARCH=$KERNELARCH CLANG_TRIPLE=$TRIPLET- $CCOMP CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- CC=clang LLVM=1" >>kernel-rpm/kernel-$SHORTTARGET.spec
	fi
	cat >>kernel-rpm/kernel-$SHORTTARGET.spec <<EOF

%install
# Install kernel modules, if any
make $SMPFLAGS V=1 INSTALL_MOD_STRIP=1 modules_install ARCH=$KERNELARCH $CCOMP INSTALL_MOD_PATH=%{buildroot} INSTALL_DTBS_PATH=%{buildroot}/boot CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- $KERNEL_LD
# And DTBs -- allow failure here because x86 and old kernels (onyx08 and friends)
# don't have the dtbs_install target
make $SMPFLAGS INSTALL_MOD_STRIP=1 dtbs_install ARCH=$KERNELARCH $CCOMP INSTALL_MOD_PATH=%{buildroot} INSTALL_DTBS_PATH=%{buildroot}/boot CROSS_COMPILE_ARM32=armv7hnl-linux-gnueabihf- $KERNEL_LD || :
mkdir -p %{buildroot}/boot
EOF
	if [ "$ARCH" = "x86_64" -o "$ARCH" = "znver1" -o "$ARCH" = "riscv64" ]; then
		cat >>kernel-rpm/kernel-$SHORTTARGET.spec <<EOF
cp $KERNELTARGET %{buildroot}/boot/vmlinuz-$KERNELVERSION
EOF
	else
		cat >>kernel-rpm/kernel-$SHORTTARGET.spec <<EOF
cp arch/$KERNELARCH/boot/$KERNELTARGET %{buildroot}/boot/vmlinuz-$KERNELVERSION
EOF
	fi

	cat >>kernel-rpm/kernel-$SHORTTARGET.spec <<EOF

%files
/boot/*
/lib/modules/*
EOF
	chown -R $BUILDUSER kernel-rpm
	cd kernel-rpm
	echo /sbin/runuser -u $BUILDUSER -- rpmbuild -bb --target $ARCH --define \"_sourcedir $(pwd)\" --define \"_specdir $(pwd)\" --define \"_srcrpmdir $(pwd)/SRPMS\" --define \"_rpmdir $(pwd)/RPMS\" --define \"_builddir $(pwd)/BUILD\" --define \"_buildrootdir $(pwd)/BUILDROOT\" kernel-$SHORTTARGET.spec >$OURDIR/kernelbuild.sh
	/sbin/runuser -u $BUILDUSER -- rpmbuild -bb --target $ARCH --define "_sourcedir $(pwd)" --define "_specdir $(pwd)" --define "_srcrpmdir $(pwd)/SRPMS" --define "_rpmdir $(pwd)/RPMS" --define "_builddir $(pwd)/BUILD" --define "_buildrootdir $(pwd)/BUILDROOT" kernel-$SHORTTARGET.spec 2>&1 |tee $OURDIR/kernelbuild.log
	cd ..
	KERNELRPM="$(ls $OURDIR/kernel-rpm/RPMS/*/*.rpm)"
else
	printf '%s\n' "KERNEL not specified in $TARGET config - assuming packaged kernel"
fi

# ===================================================================
# Generate root filesystem
# ===================================================================

# First of all let's find the right repo list...

ROOTDIR="${BASE_DISTRO}-$OMV_VERSION-$ARCH-root"

# Make sure we don't have any dangerous bind mounts left...
cleanup() {
	# We can't umount a directory while it's our working directory, go to a safe place
	cd "$OURDIR"
	while cat /proc/mounts |grep -q $OURDIR/$ROOTDIR; do
		umount -Rq $(cat /proc/mounts |grep $OURDIR/$ROOTDIR |head -n1 |awk '{print $2;}')
	done
	if [ -n "$TEMPROOT" -a -d "$TEMPROOT" ]; then
		rm -rf "$TEMPROOT"
	fi
}
trap "cleanup; exit 1" ERR SIGINT SIGTERM
trap "cleanup" EXIT
cleanup

TEMPROOT="$(mktemp -d /tmp/rootXXXXXX)"
if [ -z "$TEMPROOT" ]; then
	echo "Creating a temporary directory failed. mktemp missing?" >&2
	exit 1
fi

# Poor man's version of "dnf5 install --installroot=" --
# need to get the repository configs from rpm packages
# without having the repositories configured...
PKGS=${ABF_DOWNLOADS}/${VER_PREFIX}${OMV_VERSION}/repository/$ARCH/main/release/
printf '%s\n' $PKGS
curl -s -L $PKGS |grep '^<a' |cut -d'"' -f2 >PACKAGES
for i in $PRE_PACKAGES; do
	P=$(grep "^$i-[0-9].*" PACKAGES |tail -n1)
	if [ "$?" != "0" ]; then
		printf '%s\n' "Can't find $i package for target" >&2
		exit 1
	fi
	curl -O $PKGS/$P
	rpm -r $TEMPROOT -Uvh --ignorearch --nodeps $P
done

# Don't use mirrors when creating the image
sed -i -e '/mirror.openmandriva.org/d;s,^	,baseurl=,' "$TEMPROOT"/etc/yum.repos.d/*.repo

if printf '%s\n' ${VER_PREFIX}${OMV_VERSION} |grep -q '^[0-9]'; then
	DNF_VERSION=release
	# This also needs to work before the rock symlink is updated on
	# a new release...
	dnf5 config-manager --installroot "$TEMPROOT" --set-disabled rock-$ARCH
	dnf5 config-manager --installroot "$TEMPROOT" --set-disabled rock-updates-$ARCH
	dnf5 config-manager --installroot "$TEMPROOT" --set-enabled release-$ARCH
	dnf5 config-manager --installroot "$TEMPROOT" --set-enabled release-updates-$ARCH
else
	DNF_VERSION="${VER_PREFIX}${OMV_VERSION}"
fi

if [ -n "$EXTRA_REPOS" ]; then
	for i in $EXTRA_REPOS; do
		dnf5 config-manager --installroot "$TEMPROOT" --set-enabled $DNF_VERSION-$ARCH-$i
	done
fi

# FIXME workaround for ldd being broken in qemu on aarch64
# (causes dracut to miss bash's dependencies)
if [ "$ARCH" = "aarch64" ] && [ "$BASE_DISTRO" == "OpenMandriva-Lx" ]; then
	PACKAGES="$PACKAGES ${XLDD}"
fi
if [ "$NEED_INITRD" != "no" ]; then
	PACKAGES="$PACKAGES dracut"
fi
if [ "$USE_UEFI" = "yes" ]; then
	PACKAGES="$PACKAGES efibootmgr grub2-efi"
fi
if [ "$USE_SYSTEMD_UEFI" = "yes" ]; then
	PACKAGES="$PACKAGES efibootmgr systemd-boot"
fi

PACKAGES="$PACKAGES $HWPACKAGES"

EXPECTED_SIZE=$(LC_ALL=C.utf-8 dnf5 --assumeno install --nogpgcheck --installroot="$TEMPROOT" --releasever=$OMV_VERSION --forcearch=$ARCH $WEAKDEPS $PACKAGES $KERNELRPM 2>&1 |grep -E 'After this operation, .* extra will be used' |sed -E 's/After this operation, (.*) extra will be used.*/\1/')
echo "Expected size: $EXPECTED_SIZE"
if [ -z "$EXPECTED_SIZE" ]; then
	echo "Could not determine the expected size of the package set." >&2
	echo "Probably the package set isn't installable, or the script needs to be" >&2
	echo "adapted to a newer version of dnf." >&2
	echo "Failed command:" >&2
	echo LC_ALL=C.utf-8 dnf5 --assumeno install --nogpgcheck --installroot="$TEMPROOT" --releasever=$OMV_VERSION --forcearch=$ARCH $WEAKDEPS $PACKAGES $KERNELRPM
	LC_ALL=C.utf-8 dnf5 --assumeno install --nogpgcheck --installroot="$TEMPROOT" --releasever=$OMV_VERSION --forcearch=$ARCH $WEAKDEPS $PACKAGES $KERNELRPM
	# Keep TEMPROOT populated even after cleanup() so the user can debug it
	unset TEMPROOT
	exit 1
fi
# We use bc below because the result might be a fraction - shell
# math operations only like integers
case $(echo $EXPECTED_SIZE |cut -d' ' -f2 |tr a-z A-Z) in
BYTES)
	EXPECTED_SIZE="$(echo $EXPECTED_SIZE |cut -d' ' -f1)"
	;;
KB)
	EXPECTED_SIZE="$(echo $(echo $EXPECTED_SIZE |cut -d' ' -f1) '*' 1000 |bc -l)"
	;;
KIB)
	EXPECTED_SIZE="$(echo $(echo $EXPECTED_SIZE |cut -d' ' -f1) '*' 1024 |bc -l)"
	;;
MB)
	EXPECTED_SIZE="$(echo $(echo $EXPECTED_SIZE |cut -d' ' -f1) '*' 1000 '*' 1000 |bc -l)"
	;;
MIB)
	EXPECTED_SIZE="$(echo $(echo $EXPECTED_SIZE |cut -d' ' -f1) '*' 1024 '*' 1024 |bc -l)"
	;;
GB)
	EXPECTED_SIZE="$(echo $(echo $EXPECTED_SIZE |cut -d' ' -f1) '*' 1000 '*' 1000 '*' 1000 |bc -l)"
	;;
GIB)
	EXPECTED_SIZE="$(echo $(echo $EXPECTED_SIZE |cut -d' ' -f1) '*' 1024 '*' 1024 '*' 1024 |bc -l)"
	;;
TB)
	EXPECTED_SIZE="$(echo $(echo $EXPECTED_SIZE |cut -d' ' -f1) '*' 1000 '*' 1000 '*' 1000 '*' 1000 |bc -l)"
	;;
TIB)
	EXPECTED_SIZE="$(echo $(echo $EXPECTED_SIZE |cut -d' ' -f1) '*' 1024 '*' 1024 '*' 1024 '*' 1024 |bc -l)"
	;;
PB)
	EXPECTED_SIZE="$(echo $(echo $EXPECTED_SIZE |cut -d' ' -f1) '*' 1000 '*' 1000 '*' 1000 '*' 1000 '*' 1000 |bc -l)"
	;;
PIB)
	EXPECTED_SIZE="$(echo $(echo $EXPECTED_SIZE |cut -d' ' -f1) '*' 1024 '*' 1024 '*' 1024 '*' 1024 '*' 1024 |bc -l)"
	;;
esac
EXPECTED_SIZE=$(echo $EXPECTED_SIZE |cut -d. -f1)
echo "Expected size in bytes: $EXPECTED_SIZE"
# Add some space for filesystem overhead, files copied/created by %post scripts etc.
PADDED_EXPECTED_SIZE=$(echo $EXPECTED_SIZE '*' 1.5 '+' 32 '*' 1024 '*' 1024 |bc -l |cut -d. -f1)
echo "Padded size in bytes: $PADDED_EXPECTED_SIZE"

# setup-partitions is the first per-device script that can touch results.
# Wipe them clean now so we don't mix old and new results.
if [ -n "${IMAGENAME}" ]; then
	RESULTDIR="results/${IMAGENAME}"
else
	RESULTDIR="results/${SHORTTARGET}"
fi
rm -rf ${RESULTDIR} ; mkdir -p ${RESULTDIR}

BASENAME="${BASE_DISTRO}-${SHORTTARGET}-${OS_VERSION}"
IMAGE=${OURDIR}/${RESULTDIR}/${BASENAME}.img
[ -z "$FSTYPE" ] && FSTYPE=ext4
declare -A PARTITIONS
run setup-partitions

rm -rf "$OURDIR/$ROOTDIR"
mkdir -p "$OURDIR/$ROOTDIR"
if [ -e "${IMAGE}" ]; then
	losetup -D
	losetup -fP ${IMAGE}
	LOOPDEV=$(losetup -j ${IMAGE} |tail -n1 |cut -d: -f1)
	if [ -z "${LOOPDEV}" ]; then
		echo "Failed to find loop device for ${IMAGE}" >&2
		exit 1
	fi
	rescanPartitions ${LOOPDEV}
	if [ "${#PARTITIONS[@]}" -gt 0 ]; then
		for i in "${!PARTITIONS[@]}"; do
			MP="$(echo ${PARTITIONS[$i]}|cut -d: -f1)"
			FS="$(echo ${PARTITIONS[$i]}|cut -d: -f2)"
			LABEL="$(echo ${PARTITIONS[$i]}|cut -d: -f3)"
			MKFS_EXTRA_ARGS=""
			if [ -n "$LABEL" ]; then
				if echo $FS |grep -q fat; then
					MKFS_EXTRA_ARGS="-n ${LABEL}"
				else
					MKFS_EXTRA_ARGS="-L ${LABEL}"
				fi
			fi
			case $FS in
			swap)
				mkswap -v1 $MKFS_EXTRA_ARGS ${LOOPDEV}p${i}
				;;
			*)
				mkfs.$FS $MKFS_EXTRA_ARGS ${LOOPDEV}p${i}
				mkdir -p ${OURDIR}/${ROOTDIR}${MP}
				mount -o loop ${LOOPDEV}p${i} ${OURDIR}/${ROOTDIR}${MP}
				;;
			esac
		done
	fi
else
	# If setup-partitions didn't create an image file, it means we're creating
	# something not contained in an image file, such as a rootfs tarball or a
	# docker image
	unset IMAGE
fi

# Mount relevant filesystems so %post scripts can access
# the likes of /dev/null and /dev/urandom
for mp in /proc /sys /sys/firmware/efi/efivars /dev /dev/pts; do
	mkdir -p "$OURDIR/$ROOTDIR$mp" || :
	mount --bind -o ro $mp "$OURDIR/$ROOTDIR$mp"
done

# Move the relevant dnf configs...
mv "$TEMPROOT"/* "$OURDIR/$ROOTDIR"
rm -rf "$TEMPROOT"
unset TEMPROOT

# dnf needs a lot of temporary space that may not be available inside a just mounted image
mkdir -p "$OURDIR/$ROOTDIR"/var/cache/dnf "$OURDIR/$ROOTDIR"/var/cache/libdnf5
mount -t tmpfs none "$OURDIR/$ROOTDIR"/var/cache/libdnf5
mount -t tmpfs none "$OURDIR/$ROOTDIR"/var/cache/dnf

if ! $NATIVEBUILD; then
	# Make sure we can run %post scripts in the chroot
	mkdir -p $OURDIR/$ROOTDIR/usr/bin
	cp /usr/bin/qemu-$QEMUARCH-static $OURDIR/$ROOTDIR/usr/bin/
fi

if ! dnf5 -y install --nogpgcheck --installroot=$OURDIR/$ROOTDIR --releasever=$OMV_VERSION --forcearch=$ARCH $WEAKDEPS $PACKAGES $KERNELRPM; then
	if [ -e $OURDIR/$ROOTDIR/bin/sh ]; then
		cat >&2 <<EOF
WARNING: dnf returned an error code, but it looks like installation finished.
This is likely something (relatively) harmless like a package's post-install
script failing - but you may want to double-check.
EOF
	else
		printf '%s\n' "ERROR: dnf failed without installing what looks like a workable system."
		cleanup
		exit 1
	fi
fi

# We don't need the temporary dnf space anymore, let's free up resources
rm -rf "$OURDIR/$ROOTDIR"/var/cache/libdnf5/*
umount "$OURDIR/$ROOTDIR"/var/cache/libdnf5
rm -rf "$OURDIR/$ROOTDIR"/var/cache/dnf/*
umount "$OURDIR/$ROOTDIR"/var/cache/dnf

# FIXME (continued) workaround for ldd being
# broken on aarch64 (at least in qemu)
# (causes dracut to miss bash's dependencies)
if [ "$ARCH" = "aarch64" ] && [ "$BASE_DISTRO" == "OpenMandriva-Lx" ]; then
	mv $OURDIR/$ROOTDIR/usr/bin/ldd $OURDIR/$ROOTDIR/usr/bin/ldd.glibc
	ln -sf xldd $OURDIR/$ROOTDIR/usr/bin/ldd
fi

# set up system environment, default root password is omv
systemd-firstboot --root="$OURDIR/$ROOTDIR" \
	--locale="en_US.UTF-8" \
	--keymap="us" \
	--timezone="Europe/London" \
	--hostname="omv-$(printf '%s\n' ${TARGET} | cut -d '/' -f 2 |sed -e 's,+,,g')" \
	--root-password-hashed='$6$rG3bQ92hkTNubV1p$5qPB9FoXBhNcSE1FOklCoEDowveAgjSf2cHYVwCENZaWtgpFQaRRRN5Ihwd8nuaKMdA1R1XouOasJ7u5dbiGt0' \
	--force

# set up users
systemd-sysusers --root="$OURDIR/$ROOTDIR" || :

# set up dirs
systemd-tmpfiles --root="$OURDIR/$ROOTDIR" -E --remove

# Remove anything created by systemd-tmpfiles and friends that will
# be hidden by tmpfs mounts anyway
rm -rf "$OURDIR/$ROOTDIR/run/* $OURDIR/$ROOTDIR/tmp/*"

# Remove anything created by systemd-tmpfiles and friends that will
# be hidden by tmpfs mounts anyway
rm -rf "$OURDIR/$ROOTDIR/run/* $OURDIR/$ROOTDIR/tmp/*"

if [ "$CREATE_DEFAULT_USER" != "no" ]; then
	if ! grep -q '^omv:' $OURDIR/$ROOTDIR/etc/passwd; then
		# Create omv user (password omv)
		printf '%s\n' 'omv:x:1001:1001::/home/omv:/bin/bash' >>$OURDIR/$ROOTDIR/etc/passwd
		printf '%s\n' 'omv:$6$rG3bQ92hkTNubV1p$5qPB9FoXBhNcSE1FOklCoEDowveAgjSf2cHYVwCENZaWtgpFQaRRRN5Ihwd8nuaKMdA1R1XouOasJ7u5dbiGt0:17302:0:99999:7:::' >>$OURDIR/$ROOTDIR/etc/shadow
		printf '%s\n' 'omv:x:1001:' >>$OURDIR/$ROOTDIR/etc/group
		# Add the omv user to important groups...
		for group in audio dialout input lp lpadmin network render sambashare screen storage tty users video wheel; do
			sed -i -e "s,$group:.*\$,&omv," $OURDIR/$ROOTDIR/etc/group
		done
		cp -a $OURDIR/$ROOTDIR/etc/skel $OURDIR/$ROOTDIR/home/omv
		chown -R 1001:1001 $OURDIR/$ROOTDIR/home/omv
	fi

	# If sddm is installed, set it up to autologin as omv
	if [ -z "$SDDMSESSION" ]; then
		for desktop in plasma lxqt openbox failsafe; do
			if [ -e $OURDIR/$ROOTDIR/usr/share/xsessions/$desktop.desktop ]; then
				SDDMSESSION=$desktop
				break
			fi
		done
		if [ -z "$SDDMSESSION" ]; then
			for desktop in plasma-mobile plasmawayland weston; do
				if [ -e "$OURDIR/$ROOTDIR"/usr/share/wayland-sessions/$desktop.desktop ]; then
					SDDMSESSION=$desktop
					break
				fi
			done
		fi
	fi
	if [ -z "$NO_AUTOLOGIN" ] && [ -e "$OURDIR/$ROOTDIR/etc/sddm.conf" ]; then
		sed -i -e "s,^User=,User=omv," $OURDIR/$ROOTDIR/etc/sddm.conf
	fi
	if [ -n "$SDDMSESSION" ] && [ -e "$OURDIR/$ROOTDIR/etc/sddm.conf" ]; then
		sed -i -e "s,^Session=,Session=$SDDMSESSION," $OURDIR/$ROOTDIR/etc/sddm.conf
	fi
fi
if [ -z "$KERNEL" ]; then
	# Using packaged kernel -- let's determine KERNELVERSION
	# nevertheless so we can run dracut and possibly configure
	# bootloaders
	KERNELVERSION=$(ls --sort=time $OURDIR/$ROOTDIR/boot/vmlinuz-* 2>/dev/null|head -n1 |sed -e 's,.*vmlinuz-,,')
fi
# Handle post-processing scripts needed by packagesets
for PACKAGESET in $PACKAGESETS; do
	PACKAGESET_POST="$PACKAGESET.post"
	PACKAGESET_POST_PATH="$OURDIR/packagesets/$PACKAGESET_POST"
	if [ -e "$PACKAGESET_POST_PATH" ]; then
		cp "$PACKAGESET_POST_PATH" "$OURDIR/$ROOTDIR/tmp/$PACKAGESET_POST"
		chroot "$OURDIR/$ROOTDIR" "/tmp/$PACKAGESET_POST"
		rm  "$OURDIR/$ROOTDIR/tmp/$PACKAGESET_POST"
	fi
done

# Generate fstab
if [ "${#PARTITIONS[@]}" -gt 0 ]; then
	for i in "${!PARTITIONS[@]}"; do
		MP="$(echo ${PARTITIONS[$i]}|cut -d: -f1)"
		FS="$(echo ${PARTITIONS[$i]}|cut -d: -f2)"
		LABEL="$(echo ${PARTITIONS[$i]}|cut -d: -f3)"
		echo "/dev/disk/by-label/${LABEL} ${MP} ${FS} defaults 0 1" >>"${OURDIR}/${ROOTDIR}/etc/fstab"
	done
fi

run setup-system-files
if [ -e $OURDIR/device/$TARGET/install-openmandriva.in ]; then
	sed -e "s,@OS_VERSION@,${OS_VERSION},g;s,@OMV_VERSION@,${OMV_VERSION},g;s,@BOOTEFI@,${BOOTEFI},g" device/$TARGET/install-openmandriva.in >$OURDIR/$ROOTDIR/home/omv/install-openmandriva
	chmod +x $OURDIR/$ROOTDIR/home/omv/install-openmandriva
fi
if [ "$NEED_INITRD" != "no" ] || [ "$USE_UEFI" = "yes" ] || [ "$USE_SYSTEMD_UEFI" != "yes" ] && [ -n "$KERNELVERSION" ]; then
	if [ "$NEED_INITRD" != "no" ]; then
		run generate-initrd
	fi
	if [ "$USE_UEFI" = "yes" ]; then
		printf '%s\n' "Creating ESP for GRUB."
		mkdir -p $OURDIR/$ROOTDIR/boot/efi/EFI/BOOT
		chroot "$OURDIR/$ROOTDIR" /usr/bin/grub2-mkimage -o /boot/efi/EFI/BOOT/$BOOTEFI -O $EFIARCH -d /usr/lib/grub/$EFIARCH -p /EFI/BOOT fat part_gpt part_msdos normal boot linux configfile loopback chain efifwsetup efi_gop ls search search_label search_fs_uuid search_fs_file gfxterm gfxterm_background gfxterm_menu gfxmenu test all_video loadenv exfat ext2 part_msdos part_gpt loadenv ls chain btrfs xfs ntfs all_video efifwsetup efinet font probe video loopback gzio xzio zstd
	fi

	if [ "$USE_SYSTEMD_UEFI" = "yes" ]; then
		printf '%s\n' "Creating ESP for systemd-boot."
		mkdir -p $OURDIR/$ROOTDIR/boot/efi
		# create ESP directory scheme for systemd-boot
		for i in "$OURDIR/$ROOTDIR/boot/efi/EFI/BOOT" "$OURDIR/$ROOTDIR/boot/efi/EFI/Linux" "$OURDIR/$ROOTDIR/boot/efi/EFI/systemd" "$OURDIR/$ROOTDIR/boot/efi/loader/entries"; do
			mkdir -p $i
		done

		if [ ! -s "$OURDIR/$ROOTDIR"/usr/lib/kernel/cmdline ]; then
			printf '%s\n' 'root=LABEL=OMVAA64' >> "$OURDIR/$ROOTDIR"/usr/lib/kernel/cmdline
			for i in ${CMDLINE[@]}; do
				printf '%s\n' "$i" >> "$OURDIR/$ROOTDIR"/usr/lib/kernel/cmdline
			done
		fi

#			chroot "$OURDIR/$ROOTDIR" SYSTEMD_RELAX_ESP_CHECKS=1 bootctl install --esp-path=/boot/efi
		cp -a "$OURDIR/$ROOTDIR"/usr/lib/systemd/boot/efi/systemd-${BOOTEFI} $OURDIR/$ROOTDIR/boot/efi/EFI/BOOT/${BOOTEFI}
		cp -a "$OURDIR/$ROOTDIR"/usr/lib/systemd/boot/efi/systemd-${BOOTEFI} $OURDIR/$ROOTDIR/boot/efi/EFI/systemd
		MACH_ID=$(chroot $OURDIR/$ROOTDIR systemd-machine-id-setup --print)
		mkdir -p "$OURDIR/$ROOTDIR/boot/efi/$MACH_ID"
		chroot "$OURDIR/$ROOTDIR" kernel-install -v add "$KERNELVERSION" "/boot/vmlinuz-$KERNELVERSION"
# tricky part, looks like uboot does not support gziped kernel image in UEFI mode
# so lets gunzip it
		mv "$OURDIR/$ROOTDIR/boot/efi/$MACH_ID/$KERNELVERSION"/linux "$OURDIR/$ROOTDIR/boot/efi/$MACH_ID/$KERNELVERSION"/linux.gz
		gunzip "$OURDIR/$ROOTDIR/boot/efi/$MACH_ID/$KERNELVERSION"/linux.gz
		cat >$OURDIR/$ROOTDIR/boot/efi/loader/loader.conf<<EOF
default $MACH_ID-$KERNELVERSION.conf
timeout 10
EOF
		sed -i -e 's,boot\/efi\/,\/,g' "$OURDIR/$ROOTDIR"/boot/efi/loader/entries/$MACH_ID-$KERNELVERSION.conf
		if [ -n "${DTB}" ] && ! grep -q devicetree $OURDIR/$ROOTDIR/boot/efi/loader/entries/$MACH_ID-$KERNELVERSION.conf; then
			install -D -m644 "$OURDIR/$ROOTDIR/boot/dtb-$KERNELVERSION/${DTB}.dtb" "$OURDIR/$ROOTDIR/boot/efi/$MACH_ID/$KERNELVERSION/dtb/${DTB}.dtb"
			printf '%s\n' "devicetree "/$MACH_ID/$KERNELVERSION"/dtb/$DTB.dtb" >> $OURDIR/$ROOTDIR/boot/efi/loader/entries/$MACH_ID-$KERNELVERSION.conf
		fi
		dd if=/dev/random of="$OURDIR/$ROOTDIR/boot/efi/loader/"random-seed bs=512 count=1
		chmod +x -R $OURDIR/$ROOTDIR/boot/efi
	fi

fi

# Initialize the random seed to something, systemd might hang forever on
# e.g. an embedded board that doesn't get entropy
dd if=/dev/random of="$OURDIR/$ROOTDIR"/var/lib/systemd/random-seed bs=512 count=1
chmod 0600 "$OURDIR/$ROOTDIR"/var/lib/systemd/random-seed

# Make sure default services are started
for i in "$OURDIR/$ROOTDIR"/lib/systemd/system-preset/*.preset; do
	while read r; do
		TYPE="$(printf '%s\n' $r |awk '{ print $1; }')"
		if [ "$TYPE" = "enable" ] || [ "$TYPE" = "disable" ]; then
			[ "$(printf '%s\n' "$r" |awk '{ print $2; }')" = '*' ] && continue
			chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl $r || :
		fi
	done < $i
done

# Some devices require special alsa configs to initialize
# (e.g. unmuted DAC).
# Since /var/lib/alsa/asound.state is restored (and stored) by
# our systemd files, it's better to just initialize that (and
# not overwrite newly saved states by a package update) than to
# ship the file in a package.
if [ -e "$OURDIR"/device/$TARGET/asound.state ]; then
	mkdir -p "$OURDIR/$ROOTDIR"/var/lib/alsa
	install -c -m 644 "$OURDIR"/device/$TARGET/asound.state "$OURDIR/$ROOTDIR"/var/lib/alsa/asound.state
fi

# Make sure key services are started even if they're omitted
# in the preset files
chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl enable getty@tty1.service
[ -e "$OURDIR/$ROOTDIR"/lib/systemd/system/simplelogin.service ] && chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl enable simplelogin
[ -e "$OURDIR/$ROOTDIR"/lib/systemd/system/sddm.service ] && chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl enable sddm
if [ -e "$OURDIR/$ROOTDIR/lib/systemd/system/sddm.service" ] || [ -e "$OURDIR/$ROOTDIR/lib/systemd/system/simplelogin.service" ]; then
	chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl set-default graphical.target
else
	chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl set-default multi-user.target
fi
# At least while we're mostly dealing with headless boards
[ -e "$OURDIR/$ROOTDIR/lib/systemd/system/sshd.service" ] && chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl enable sshd
for i in $SERVICES; do
	if [ -e "$OURDIR/$ROOTDIR/lib/systemd/system/$i.service" ]; then
		chroot "$OURDIR/$ROOTDIR" /usr/bin/systemctl enable $i
	else
		printf '%s\n' "WARNING: Service $i requested, but not installed" >&2
	fi
done

if [ -x "$OURDIR/$ROOTDIR"/usr/bin/fc-cache ]; then
    # set the timestamp on the directories to be a whole second
    # fc-cache looks at the nano second portion which will otherwise be
    # non-zero as we are on ext4, but then it will compare against the stamps
    # on the squashfs live image, squashfs only has second level timestamp resolution
    FCTIME=$(date +%Y%m%d%H%M.%S)
    chroot "$OURDIR/$ROOTDIR" find /usr/share/fonts -type d -exec touch -t "$FCTIME" {} \;
    chroot "$OURDIR/$ROOTDIR" fc-cache -rf
    chroot "$OURDIR/$ROOTDIR" /bin/mkdir -p /root/.cache/fontconfig/
    chroot "$OURDIR/$ROOTDIR" /bin/mkdir -p /home/omv/.cache/fontconfig/
fi

# Rebuild man-db
[ -x "$OURDIR/$ROOTDIR"/usr/bin/mandb ] && chroot "$OURDIR/$ROOTDIR" /usr/bin/mandb --quiet

# Rebuild mime database
[ -x "$OURDIR/$ROOTDIR"/usr/bin/update-mime-database ] && chroot "$OURDIR/$ROOTDIR" /usr/bin/update-mime-database /usr/share/mime

# Generate gconv-modules.cache
#[ -x "$OURDIR/$ROOTDIR"/usr/sbin/iconvconfig ] && chroot "$OURDIR/$ROOTDIR" /usr/sbin/iconvconfig

chroot "$OURDIR/$ROOTDIR" /sbin/ldconfig

for i in etc var; do
    printf "%s\n" 'File created by os-image-builder. See systemd-update-done.service(8).' > "$OURDIR/$ROOTDIR/$i"/.updated
done

cd "$OURDIR/$ROOTDIR"
run postprocess

# There shouldn't be any files in the root filesystem. If there are any,
# they're probably core dump files generated by qemu while running systemctl
# and friends.
for i in *; do
	[ -f "$i" ] && rm -f "$i"
done
cd ..

# Reinstall distro-release-repos to get mirrors back
dnf5 -y reinstall --installroot="$OURDIR/$ROOTDIR" --releasever=$OMV_VERSION --forcearch=$ARCH ${PRE_PACKAGES}
[ -d "$OURDIR/$ROOTDIR/var/cache/dnf" ] && rm -rf "$OURDIR/$ROOTDIR/var/cache/dnf/*"

run generate-bootimg
# Stuff in virtual filesystems should not make it to
# root filesystems...
cleanup

#run generate-rootfs
#
#xz -9ef ${RESULTDIR}/*.img &>/dev/null || :
#
# All of the following are allowed to fail because not
# every board needs/produces every one of them
#mv *.img* ${RESULTDIR}/ 2>/dev/null || :
#mv *.tar* ${RESULTDIR}/ 2>/dev/null || :
#cp -a device/${TARGET}/*.md ${RESULTDIR}/ 2>/dev/null || :
#cp -a device/${TARGET}/write2sd ${RESULTDIR}/ 2>/dev/null || :
#cp -a device/${TARGET}/write2device ${RESULTDIR}/ 2>/dev/null || :
#
#for i in device/${TARGET}/*.md.in device/${TARGET}/write2sd.in device/${TARGET}/write2device.in; do
#	[ -e "$i" ] || continue
#	r="${RESULTDIR}/$(basename $i .in)"
#	sed -e "s,@OS_VERSION@,${OS_VERSION},g;s,@OMV_VERSION@,${OMV_VERSION},g;s,@BASENAME@,${BASENAME},g" $i >"$r"
#	[ -x "$i" ] && chmod 0755 "$r"
#done

if [ "$ABF" = "1" ]; then
	# Make sure the remaining scripts have sufficient access
	chown -R omv:omv ${RESULTDIR}
else
	chown -R ${BUILDUSER} ${RESULTDIR}
fi

printf '%s\n' 'Building has finished.'
