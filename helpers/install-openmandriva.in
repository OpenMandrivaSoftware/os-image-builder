#!/bin/bash
if [ "$(id -u)" != "0" ]; then
	echo "This script needs root access."
	echo "The default root password of the live image is \"omv\"."
	exec sudo $0 "$@"
	exit 1
fi

. /usr/share/om-text-installer/partitions

TOOLOUTPUT=/dev/null
VERBOSE=""

if [ -z "$(ls -A /sys/firmware/efi/efivars)" ]; then
	USE_UEFI=false
	USE_BIOS=true
else
	USE_UEFI=true
	USE_BIOS=false
fi

while getopts "bBef:r:s:v" opt; do
	case $opt in
	b)
		# Use BIOS boot
		USE_UEFI=false
		USE_BIOS=true
		;;
	B)
		# Install both BIOS and UEFI boot environments
		USE_UEFI=true
		USE_BIOS=true
		;;
	e)
		# Use UEFI boot even if it wasn't detected
		USE_UEFI=true
		USE_BIOS=false
		;;
	f)
		FSTYPE="$OPTARG"
		;;
	r)
		ROOTSIZE="$OPTARG"
		;;
	s)
		SWAPSIZE="$OPTARG"
		;;
	v)
		TOOLOUTPUT=/dev/stderr
		VERBOSE=-v
		;;
	*)
		echo "Unknown option $opt"
		exit 1
		;;
	esac
done
shift $((OPTIND-1))

if $USE_BIOS && ! [[ "$(uname -m)" =~ (i.86|x86_64) ]]; then
	echo "BIOS is x86 only."
	exit 1
fi

[ -z "$FSTYPE" ] && FSTYPE="$(head -n1 /proc/mounts |cut -d' ' -f3)"
[ -z "$FSTYPE" ] && FSTYPE="ext4"

DESTINATION=/dev/sda
[ -n "$1" ] && DESTINATION="$1"

if ! [ -b "$DESTINATION" ]; then
	echo "Invalid destination device $DESTINATION"
	exit 1
fi

cat <<EOF
WARNING: This script will wipe and overwrite the entire disk $1
Press Ctrl-C if you don't want this to happen. Use $0 /dev/whatever to
select a different target device.

EOF

if [ -e /etc/om-text-installer/help.blockdevs ]; then
	cat /etc/om-text-installer/help.blockdevs
	echo
fi

cat <<EOF
If you wish to use partition sizes other than this installer's defaults, pass
parameters
	-s X
to set the size of a swap partition (e.g. 0 to not create a swap partition,
or 2G to create a 2GiB swap partition)
	-r X
to split root and home partitions and set the size of the root partition to
X, e.g. 20G for 20 GiB, with the home partition filling the rest of the disk.
Setting -r 0 will not split / and /home and use all available space for the
combined / and /home partition.

All Linux partitions will be formatted using the $FSTYPE filesystem.
Use -f FSTYPE (e.g. -f ext4 or -f btrfs) for a different choice.

If you need a more complex partition table, e.g. leaving space for another OS,
create a file in /etc/om-text-installer/partitions describing the
partition/filesystem layout. See this script for the correct format.

Press Enter to continue or Ctrl-C to abort.
EOF
read

# The "echo 1" typically does nothing, but is required to get past
# gdisk prompting what to do ("Use current GPT" over "Create blank GPT")
# when dealing with a corrupt partition table
# (e.g. after dd if=/dev/zero of=/dev/sda bs=1M count=32)
DISKSIZE="$(echo 1 |gdisk -l $DESTINATION |grep "^Disk /" |awk '{ print $3; }')"
# gdisk output is in sectors of 512 bytes
DISKSIZE=$((DISKSIZE*512))

if [ -e /etc/om-text-installer/partitions ]; then
	. /etc/om-text-installer/partitions
else
	# If the disk is large enough, we want a swap partition and a root/home split by default
	if [ "$DISKSIZE" -gt 100000000000 ]; then
		[ -z "$SWAPSIZE" ] && SWAPSIZE=8G
		[ -z "$ROOTSIZE" ] && ROOTSIZE=60G
	else
		[ -z "$SWAPSIZE" ] && SWAPSIZE=0
		[ -z "$ROOTSIZE" ] && ROOTSIZE=0
	fi

	echo "Setting up partition table..."
	case "$(uname -m)" in
	i?86)
		ROOTTAG=8303
		;;
	x86_64)
		ROOTTAG=8304
		;;
	aarch64)
		ROOTTAG=8305
		;;
	*)
		ROOTTAG=8300
		;;
	esac
	PN=1
	PARTITIONS=()
	if $USE_BIOS; then
		PARTITIONS+=("34:2047:ef02:::BIOSBOOT:1")
		PN=$((PN+1))
	fi
	if $USE_UEFI; then
		PARTITIONS+=(":+256M:ef00:vfat:/boot/efi:UEFIBOOT")
		PN=$((PN+1))
	fi
	if [ "$SWAPSIZE" != 0 ]; then
		PARTITIONS+=(":+${SWAPSIZE}:8200:swap")
		PN=$((PN+1))
	fi
	if [ "$ROOTSIZE" != 0 ]; then
		PARTITIONS+=(":+${ROOTSIZE}:${ROOTTAG}:${FSTYPE}:/:/")
		PN=$((PN+1))
		PARTITIONS+=("::8302:${FSTYPE}:/home:/home")
		PN=$((PN+1))
	else
		PARTITIONS+=("::${ROOTTAG}:${FSTYPE}:/:/")
		PN=$((PN+1))
	fi
fi

partitionDisk ${DESTINATION} PARTITIONS

# Make sure efivarfs is mounted -- it might not be if
# the kernel has been built with modular efivarfs and
# the initramfs doesn't force load the module
if $USE_UEFI; then
	mount -t efivarfs none /sys/firmware/efi/efivars &>/dev/null || :
fi

mkdir -p /mnt/destination
mountAll ${DESTINATION} PARTITIONS /mnt/destination
for i in /dev /proc /sys /sys/firmware/efi/efivars; do
	mkdir -p /mnt/destination$i || :
	mount --bind $i /mnt/destination$i || :
done

echo "Copying OS..."
P=$(partitionSeparator ${DESTINATION})
MOUNTS=$(for i in "${!PARTITIONS[@]}"; do
	MP="$(echo ${PARTITIONS[$i]}|cut -d: -f5)"
	MPLEN="$(echo $MP |wc -c)"
	echo $MPLEN.$i
done |sort -V |cut -d. -f2)
for i in $MOUNTS; do
	MP="$(echo ${PARTITIONS[$i]}|cut -d: -f5)"
	if [ -n "$MP" -a -d "$MP" ]; then
		(cd ${MP} && tar c --one-file-system -f - .) | (cd /mnt/destination${MP} && tar x $VERBOSE -f -)
	fi
done

echo "Setting up system files..."

# Set up fstab for the target filesystem rather than the current boot device
rm -f /mnt/destination/etc/fstab
for i in $MOUNTS; do
	PARTNO="$(echo ${PARTITIONS[$i]} |cut -d: -f8)"
	[ -z "$PARTNO" ] && PARTNO=$((i+1))
	FS="$(echo ${PARTITIONS[$i]} |cut -d: -f4)"
	MP="$(echo ${PARTITIONS[$i]} |cut -d: -f5)"
	UUID="$(blkid ${DESTINATION}${P}${PARTNO} |sed -e 's,.* UUID=",,;s,".*,,')"
	if [ "$MP" = "/" ]; then
		echo "UUID=${UUID} ${MP} ${FS} defaults,noatime 0 1" >>/mnt/destination/etc/fstab
		ROOTUUID="${UUID}"
	elif [ -n "$MP" ]; then
		echo "UUID=${UUID} ${MP} ${FS} defaults,noatime 0 2" >>/mnt/destination/etc/fstab
	elif [ "$FS" = "swap" ]; then
		echo "UUID=${UUID} swap swap defaults,noatime 0 1" >>/mnt/destination/etc/fstab
	fi
	[ "$MP" = "/boot/efi" ] && UEFIDEV="${DESTINATION}${P}${PARTNO}"
done

# Rebuild the initramfs to adjust any mention of a rootfs UUID/LABEL
for i in /mnt/destination/boot/vmlinuz-*; do
	KERNELVERSION=$(echo $i |sed -e 's,.*vmlinuz-,,')
	chroot /mnt/destination dracut --xz -f /boot/initrd-${KERNELVERSION}.img ${KERNELVERSION}
done
if $USE_UEFI; then
	echo "Registering with UEFI bootloader"
	sed -i -e "s,^search .*,search --no-floppy --fs-uuid --set=root $ROOTUUID," /mnt/destination/boot/efi/EFI/BOOT/grub.cfg
	sed -i -e "s,LABEL=OMVROOT,UUID=$ROOTUUID,g" /mnt/destination/boot/efi/EFI/BOOT/grub.cfg
	cp /mnt/destination/boot/efi/EFI/BOOT/grub.cfg /mnt/destination/boot/efi/EFI/openmandriva/
	cp /mnt/destination/boot/efi/EFI/BOOT/grub.cfg /mnt/destination/boot/grub2/
	efibootmgr --create -L 'OpenMandriva Lx @OMV_VERSION@' -l '\EFI\BOOT\@BOOTEFI@' -d "$DESTINATION" -p $(echo $UEFIDEV |sed -e "s,$DESTINATION,,")
	chroot /mnt/destination /usr/bin/grub2-install 
fi
if $USE_BIOS; then
	echo "Installing BIOS grub bootloader"
	BOOTEDUUID="$(cat /mnt/destination/boot/grub2/grub.cfg |grep -- '--set=root ' |head -n1 |sed -e 's,.*--set=root ,,')"
	sed -i -e "s,$BOOTEDUUID,$ROOTUUID,g" -E "s, root=[a-z0-9/]+, root=UUID=$ROOTUUID,g" /mnt/destination/boot/grub2/grub.cfg
	chroot /mnt/destination /usr/bin/grub2-install --target=i386-pc $DESTINATION
fi

# Remove the installer from the already installed system
rm -f /mnt/destination/home/omv/install-openmandriva

umountAll /mnt/destination

echo "DONE! OpenMandriva should now be installed."
